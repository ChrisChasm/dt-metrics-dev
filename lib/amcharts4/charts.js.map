{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/PieChart.ts","webpack:///../../../../../src/.internal/charts/series/PieTick.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///./charts.js","webpack:///../../src/charts.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts"],"names":["__WEBPACK_IMPORTED_MODULE_15__core_utils_Utils__","__webpack_require__","XYChartDataItem","_super","_this","call","this","className","applyTheme","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__SerialChart__","XYChart","_axisRendererX","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererX__","_axisRendererY","__WEBPACK_IMPORTED_MODULE_5__axes_AxisRendererY__","maskBullets","chartContainer","layout","padding","topAxesCont","createChild","__WEBPACK_IMPORTED_MODULE_2__core_Container__","shouldClone","width","Object","__WEBPACK_IMPORTED_MODULE_10__core_utils_Percent__","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","plotContainer","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","__WEBPACK_IMPORTED_MODULE_9__core_elements_ZoomOutButton__","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","_bulletMask","prototype","applyInternalDefaults","__WEBPACK_IMPORTED_MODULE_14__core_utils_Type__","readerTitle","language","translate","draw","toFront","mask","updatePlotElements","__WEBPACK_IMPORTED_MODULE_13__core_utils_Iterator__","series","iterator","invalidate","validateData","_parseDataFrom","xAxes","axis","dataChangeUpdate","yAxes","minWidth","undefined","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","handleXAxisChange","event","updateXAxis","target","handleYAxisChange","updateYAxis","processXAxis","newValue","chart","renderer","axisLetter","observe","handleXAxisRangeChange","dataProvider","processAxis","processXAxisRemoval","oldValue","off","processYAxis","handleYAxisRangeChange","processYAxisRemoval","range","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","__WEBPACK_IMPORTED_MODULE_12__core_utils_Math__","start","end","seriesAppeared","show","appeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","opposite","toBack","processRenderer","__WEBPACK_IMPORTED_MODULE_6__axes_CategoryAxis__","_dataUsers","moveValue","gridContainer","breakContainer","invalidateDataItems","defineProperty","_xAxes","__WEBPACK_IMPORTED_MODULE_3__core_utils_List__","_yAxes","handleSeriesAdded","xAxis","yAxis","fill","colors","next","stroke","e","raiseCriticalError","_cursor","cursor","removeDispose","_disposers","push","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","createCursor","__WEBPACK_IMPORTED_MODULE_8__cursors_XYCursor__","visible","isHiding","xPosition","yPosition","showAxisTooltip","showSeriesTooltip","x","y","hideObjectTooltip","updateSeriesLegend","updateLegendValue","sprites","sprite","tooltip","position","topLeft","bottomRight","pixelWidth","pixelHeight","seriesPoints","each","tooltipText","tooltipHTML","setBounds","point","showTooltipAtPosition","sort","a","b","length","top_1","bottom","topSeriesPoints","botSeriesPoints","i","nextY","pointY","invalid","validate","label","pixelY","measuredHeight","pixelMarginBottom","nextHeight","pixelMarginTop","dataItems","getUpdatedRange","difference","behavior","xRange","getIndex","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","maxPanOut","panStartRange","newStart","Math","max","newEnd","min","newRange","_scrollbarX","orientation","handleXScrollbarChange","adapter","add","arg","value","getPositionLabel","_scrollbarY","handleYScrollbarChange","fixRange","instantly","round","realRange","dataInvalid","diff","roundPosition","axisRange","zoom","getPropertyValue","setPropertyValue","dataSourceDateFields","fields","populateDataSourceFields","dataFields","dataSourceNumberFields","processConfig","config","len","type","Error","axisRanges","index","configOrder","createSeries","__WEBPACK_IMPORTED_MODULE_7__series_XYSeries__","_zoomOutButton","button","copyFrom","source","__WEBPACK_IMPORTED_MODULE_11__core_Registry__","registeredClasses","__WEBPACK_IMPORTED_MODULE_7__core_utils_Iterator__","CategoryAxisDataItem","text","locations","category","endCategory","properties","setProperty","__WEBPACK_IMPORTED_MODULE_1__Axis__","CategoryAxis","dataItemsByCategory","__WEBPACK_IMPORTED_MODULE_3__core_utils_Dictionary__","axisFieldName","_lastDataItem","createDataItem","component","createAxisBreak","__WEBPACK_IMPORTED_MODULE_4__CategoryAxisBreak__","validateDataRange","dataCount","startIndex","__WEBPACK_IMPORTED_MODULE_5__core_utils_Math__","floor","endIndex","ceil","maxCount","axisLength","minGridDistance","frequency","_startIndex","_endIndex","fixAxisBreaks","_frequency","_series","invalidateDataRange","axisBreaks","maxZoomFactor","resetIterators","itemIndex","dataItem","__disabled","isInBreak","appendDataItem","validateDataElement","axisBreak","adjustedStartValue","adjustedEndValue","breakSize","itemIndex_1","__WEBPACK_IMPORTED_MODULE_6__core_utils_Type__","categoryToIndex","fillEndIndex","fillPosition","fillEndPosition","indexToPosition","endPosition","isRange","axisFill","location","positionToPoint","tick","updateTickElement","grid","updateGridElement","updateLabelElement","updateFillElement","fillRule","processDataItem","dataContext","existingDataItem","getKey","remove","setKey","adjustDifference","cellStartLocation","cellEndLocation","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","angle","positionToAngle","anyToPoint","anyToPosition","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startLocation","endLocation","startPos","endPos","getPositionRangePath","positionToIndex","getSeriesDataItem","getX","key","categories","basePoint","getY","getAngle","stackKey","getCellStartPosition","getCellEndPosition","getTooltipText","apply","breakStartPosition","startPosition","breakEndPosition","breakPosition","initRenderer","baseGrid","disabled","__WEBPACK_IMPORTED_MODULE_2__core_Registry__","__WEBPACK_IMPORTED_MODULE_4__core_utils_Type__","AxisLabelCircular","radius","isMeasured","fixPoint","axisRadius","__WEBPACK_IMPORTED_MODULE_3__core_utils_Math__","atan2","sign","inside","relativeRotation","dy","_measuredHeight","dx","_measuredWidth","labelRadius","bbox","rotation","dH","dW","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","__WEBPACK_IMPORTED_MODULE_1__AxisLabel__","__WEBPACK_IMPORTED_MODULE_14__core_rendering_Path__","XYSeriesDataItem","values","valueX","stack","valueY","openValueX","openValueY","dateX","dateY","openDateX","openDateY","setLocation","setValue","getDate","date","setDate","categoryX","setCategory","categoryY","openCategoryX","openCategoryY","getMin","working","stackValue","__WEBPACK_IMPORTED_MODULE_12__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_13__core_utils_Array__","field","getWorkingValue","getValue","getMax","__WEBPACK_IMPORTED_MODULE_1__Series__","XYSeries","_xAxis","__WEBPACK_IMPORTED_MODULE_5__core_utils_Disposer__","_yAxis","mainContainer","__WEBPACK_IMPORTED_MODULE_2__core_Sprite__","element","paper","stacked","pointerOrientation","returnBulletDefaultState","defineFields","_xField","_yField","name","uid","disable","processSeriesDataItem","enable","setInitialWorkingValues","_chart","xAxisFieldName","xField","xOpenField","__WEBPACK_IMPORTED_MODULE_11__core_utils_Utils__","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","baseAxis","_xValueFields","_yValueFields","addValueField","__WEBPACK_IMPORTED_MODULE_3__axes_ValueAxis__","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","__WEBPACK_IMPORTED_MODULE_9__core_utils_Iterator__","fillPath","attr","d","getAxisField","validateDataItems","updateAxisBySeries","postProcessSeriesDataItems","dataRangeInvalid","_showBullets","minBulletDistance","get","oldAxis","dataItemsByAxis","removeKey","dispose","removeValue","set","registerSeries","__WEBPACK_IMPORTED_MODULE_4__core_utils_Dictionary__","invalidateData","_baseAxis","__WEBPACK_IMPORTED_MODULE_7__axes_DateAxis__","processValues","minX","Infinity","maxX","minY","maxY","getStackValue","stackX","stackY","__WEBPACK_IMPORTED_MODULE_10__core_utils_Math__","processSeriesDataItems","xAxisId","yAxisId","_tmin","_tmax","dispatchImmediately","_smin","_smax","toAxisPosition","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","_prevTooltipDataItem","_a","bullets","_b","done","setState","showTooltip","hideTooltip","positionBullet","bullet","hasValue","bulletLocationX","getBulletLocationX","bulletLocationY","locationX","locationY","moveTo","bulletLocation","workingLocations","getBulletLocationY","duration","animation","interpolationDuration","delay","sequencedInterpolation","sequencedInterpolationDelay","minZoomed","maxZoomed","isDisposed","once","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","field_1","setCalculatedValue","backwards","prevSeries","stackedSeries","prevDataItem","prevValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","map","hasKey","xKey","yKey","stackKeyX","stackKeyY","__WEBPACK_IMPORTED_MODULE_8__core_Registry__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Object__","DateAxisDataItem","endDate","dates","getTime","endValue","__WEBPACK_IMPORTED_MODULE_1__ValueAxis__","DateAxis","gridIntervals","__WEBPACK_IMPORTED_MODULE_2__core_utils_List__","dateFormats","periodChangeDateFormats","_markUnitChange","_baseIntervalReal","timeUnit","count","_startLocation","_endLocation","_prevSeriesTime","_minSeriesDifference","MAX_VALUE","gridInterval","_gridInterval","gridDuration","__WEBPACK_IMPORTED_MODULE_6__core_utils_Time__","pushAll","__WEBPACK_IMPORTED_MODULE_4__DateAxisBreak__","periodCount","baseDuration","handleSelectionExtremesChange","calculateZoom","chooseInterval","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","_nextGridUnit","_intervalDuration","_difference","__WEBPACK_IMPORTED_MODULE_8__core_utils_Iterator__","findClosestIndex","__WEBPACK_IMPORTED_MODULE_7__core_utils_Type__","data","postProcessSeriesDataItem","addEmptyUnitsBreaks","startDate","toString","skipEmptyPeriods","clear","startTime","startTimeStr","this_1","create","_axisBreaks","breakGridCount","gridDate","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","getBreaklessDate","durationBreaksRemoved","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","this_2","format","dateFormatter","find","renderer_1","timeUnit_1","intervalCount_1","__WEBPACK_IMPORTED_MODULE_9__core_utils_Math__","startPoint","endPoint","prevGridDate_1","timestamp_1","text_1","adjustedMax","endTimestamp","valueToPosition","adjustMinMax","step","fixMin","fixMax","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","dateToPoint","valueToPoint","positionToDate","positionToValue","getTimeByLocation","baseValue","endTime","sameItemTime","prevSeriesTime","time","abs","differece","_baseInterval","timeInterval","breakTemplate","template","startLine","endLine","fillShape","_tooltipDateFormat","tooltipDateFormat","dateFormat","leftCount","leftDataItem","leftDate","rightCount","rightDataItem","rightDate","getCurrentLabelFormat","ticks","labels","zoomToDates","skipRangeEvent","parse","zoomToValues","__WEBPACK_IMPORTED_MODULE_5__core_Registry__","__WEBPACK_IMPORTED_MODULE_10__core_rendering_Path__","XYCursor","_lineX","__WEBPACK_IMPORTED_MODULE_3__core_utils_Disposer__","_lineY","interfaceColors","__WEBPACK_IMPORTED_MODULE_6__core_utils_InterfaceColorSet__","selection","fillOpacity","getFor","lineX","__WEBPACK_IMPORTED_MODULE_5__core_utils_Color__","strokeDasharray","strokeOpacity","lineY","updateSize","innerHeight","innerWidth","updateSelection","_usesSelection","downPoint","pixelX","w","__WEBPACK_IMPORTED_MODULE_7__core_utils_Math__","_positionPrecision","h","validatePosition","triggerMoveReal","triggeredByPointer","updateLinePositions","_generalBehavior","getPanningRanges","dispatch","triggerDownReal","fitsToBounds","updatePoint","selectionX","selectionY","triggerUpReal","upPoint","getRanges","startX","startY","deltaX","deltaY","endX","endY","handleXTooltipPosition","handleYTooltipPosition","__WEBPACK_IMPORTED_MODULE_8__core_utils_Utils__","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","interactionsEnabled","reset","_selection","__WEBPACK_IMPORTED_MODULE_9__core_utils_Type__","__WEBPACK_IMPORTED_MODULE_1__Cursor__","__WEBPACK_IMPORTED_MODULE_4__core_Registry__","LineSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__XYSeries__","LineSeries","minDistance","segments","__WEBPACK_IMPORTED_MODULE_4__core_utils_List__","createSegment","applyOnClones","_segmentsIterator","__WEBPACK_IMPORTED_MODULE_12__core_utils_Iterator__","createNewItems","connect","tensionX","tensionY","segmentsContainer","__WEBPACK_IMPORTED_MODULE_3__core_Container__","__WEBPACK_IMPORTED_MODULE_5__LineSeriesSegment__","previousDataItem","__WEBPACK_IMPORTED_MODULE_6__axes_ValueAxis__","initialY","workingValue","setWorkingValue","setWorkingLocation","initialX","openSegment","_workingStartIndex","segment","sliceData","_workingEndIndex","openIndex","closeIndex","points","propertiesChanged","getFirst","contents","__WEBPACK_IMPORTED_MODULE_13__core_utils_Object__","filters","hasProperties","updateSegmentProperties","addPoints","closeSegment","closePoints","drawSegment","itemProperties","changed","propertyName","createLegendMarker","marker","disposeChildren","line","__WEBPACK_IMPORTED_MODULE_9__core_elements_Line__","x2","__WEBPACK_IMPORTED_MODULE_11__core_elements_Rectangle__","copyToLegendMarker","hasLabels_1","children","child","__WEBPACK_IMPORTED_MODULE_10__core_elements_Label__","clone","__WEBPACK_IMPORTED_MODULE_6__core_rendering_Smoothing__","LineSeriesSegment","fillSprite","strokeSprite","smoothnessX","smoothnessY","path","__WEBPACK_IMPORTED_MODULE_4__core_rendering_Path__","smooth","lineElement","__WEBPACK_IMPORTED_MODULE_5__core_utils_Object__","fillElement","__WEBPACK_IMPORTED_MODULE_1__core_Container__","__WEBPACK_IMPORTED_MODULE_3__core_Registry__","PieSeriesDataItem","radiusValue","setVisibility","uidAttr","slice","toValue","_legendDataItem","valueLabel","_tick","addSprite","_label","_slice","slices","hiddenInLegend","PieSeries","alignLabels","startAngle","endAngle","__WEBPACK_IMPORTED_MODULE_7__core_utils_ColorSet__","calculatePercent","slicesContainer","__WEBPACK_IMPORTED_MODULE_6__core_Container__","ticksContainer","labelsContainer","initSlice","__WEBPACK_IMPORTED_MODULE_2__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_4__PieTick__","__WEBPACK_IMPORTED_MODULE_5__core_utils_List__","__WEBPACK_IMPORTED_MODULE_3__axes_AxisLabelCircular__","renderingFrequency","skipFocusThreshold","defaultState","transitionEasing","__WEBPACK_IMPORTED_MODULE_11__core_utils_Ease__","states","scale","itemReaderText","sliceType","handleSliceScale","handleSliceMove","shiftRadius","togglable","hiddenState","opacity","_leftItems","_rightItems","_currentStartAngle","_arcRect","_maxRadiusPercent","radiusValuePercent","percent","reverse","arrangeLabels","slice_1","innerRadius","arc","normalizedMiddleAngle","middleAngle","verticalCenter","arcRect","horizontalCenter","distance","iy","ix","radiusY","itemsFocusable","role","focusable","ev","populateString","hoverable","nextLabel","getNextLabel","nextDataItem","__WEBPACK_IMPORTED_MODULE_10__core_utils_Iterator__","property","isActive","getContainerBBox","Candlestick","createAssets","lowLine","__WEBPACK_IMPORTED_MODULE_2__core_elements_Line__","highLine","__WEBPACK_IMPORTED_MODULE_1__Column__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Type__","AxisRendererCircular","pixelRadiusReal","useChartAngles","__WEBPACK_IMPORTED_MODULE_6__core_utils_Percent__","pixelPerfect","tooltipLocation","setAxis","__WEBPACK_IMPORTED_MODULE_9__core_utils_Utils__","pixelRadius","cos","sin","PI","coordinate","positionToCoordinate","updateAxisLine","__WEBPACK_IMPORTED_MODULE_8__core_rendering_Path__","gridInnerRadius","toggleVisibility","tickLength","positionItem","minLabelPosition","maxLabelPosition","cornerRadius","pixelInnerRadius","createGrid","__WEBPACK_IMPORTED_MODULE_3__GridCircular__","createFill","__WEBPACK_IMPORTED_MODULE_2__AxisFillCircular__","createLabel","__WEBPACK_IMPORTED_MODULE_4__AxisLabelCircular__","__WEBPACK_IMPORTED_MODULE_1__AxisRenderer__","AxisFillCircular","__WEBPACK_IMPORTED_MODULE_2__core_utils_Percent__","__WEBPACK_IMPORTED_MODULE_1__AxisFill__","GridCircular","__WEBPACK_IMPORTED_MODULE_1__Grid__","RadarChartDataItem","__WEBPACK_IMPORTED_MODULE_1__XYChart__","RadarChart","__WEBPACK_IMPORTED_MODULE_8__axes_AxisRendererCircular__","__WEBPACK_IMPORTED_MODULE_9__axes_AxisRendererRadial__","innerRadiusModifyer","radarContainer","__WEBPACK_IMPORTED_MODULE_4__core_Container__","__WEBPACK_IMPORTED_MODULE_5__core_elements_Circle__","__WEBPACK_IMPORTED_MODULE_11__core_utils_Iterator__","__WEBPACK_IMPORTED_MODULE_7__cursors_RadarCursor__","beforeDraw","rect","__WEBPACK_IMPORTED_MODULE_13__core_utils_Math__","innerRect","wr","hr","mr","maxRadius","diameter","__WEBPACK_IMPORTED_MODULE_10__core_utils_Utils__","_pixelInnerRadius","definedBBox","__WEBPACK_IMPORTED_MODULE_3__series_RadarSeries__","__WEBPACK_IMPORTED_MODULE_6__core_Registry__","CategoryAxisBreak","__WEBPACK_IMPORTED_MODULE_1__AxisBreak__","DateAxisBreak","startValue","__WEBPACK_IMPORTED_MODULE_1__ValueAxisBreak__","__WEBPACK_IMPORTED_MODULE_8__core_utils_Type__","Cursor","__WEBPACK_IMPORTED_MODULE_4__core_utils_Percent__","trackable","clickable","interaction","__WEBPACK_IMPORTED_MODULE_2__core_interaction_Interaction__","body","handleCursorDown","handleCursorUp","handleCursorMove","isLocalElement","pointer","svg","local","__WEBPACK_IMPORTED_MODULE_7__core_utils_Utils__","triggerMove","getPositions","triggerDown","setGlobalStyle","__WEBPACK_IMPORTED_MODULE_5__core_interaction_Mouse__","grabbing","triggerUp","__WEBPACK_IMPORTED_MODULE_6__core_utils_Math__","getHitOption","interactions","default","cancelable","preventDefault","lockElement","RadarSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__LineSeries__","RadarSeries","connectEnds","unshift","RadarCursor","truePixelRadius","cursorTooltipEnabled","updateLineX","updateLineY","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","__WEBPACK_IMPORTED_MODULE_6__core_utils_Utils__","upAngle","upRadius","__WEBPACK_IMPORTED_MODULE_1__XYCursor__","AxisRendererRadial","__WEBPACK_IMPORTED_MODULE_4__core_utils_Disposer__","gridType","axisAngle","__WEBPACK_IMPORTED_MODULE_5__core_utils_Percent__","title","__WEBPACK_IMPORTED_MODULE_2__CategoryAxis__","gridLocation","count_1","updateBaseGridElement","invalidateAxisItems","count_2","updateBreakElement","createBreakSprites","__WEBPACK_IMPORTED_MODULE_3__core_elements_WavedCircle__","updateTooltip","tooltipOrientation","bigNum","axisFullLength","__WEBPACK_IMPORTED_MODULE_1__AxisRendererY__","ClockHand","_axis","__WEBPACK_IMPORTED_MODULE_7__core_utils_InterfaceColorSet__","pin","__WEBPACK_IMPORTED_MODULE_2__core_elements_Circle__","startWidth","endWidth","hand","__WEBPACK_IMPORTED_MODULE_3__core_elements_Trapezoid__","leftSide","rightSide","x0","x1","_pin","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","to","updateValue","PieChartDataItem","PieChart","minHeight","updateRadius","feedLegend","chartCont","seriesRadius","__WEBPACK_IMPORTED_MODULE_5__core_utils_Iterator__","legend","legendData_1","legendSettings","labelText","itemLabelText","valueText","valueLabels","itemValueText","itemContainers","propertyFields","__WEBPACK_IMPORTED_MODULE_3__series_PieSeries__","setLegend","pieSeriesDataItem","isHover","PieTick","__WEBPACK_IMPORTED_MODULE_2__core_utils_Disposer__","y0","y1","y2","__WEBPACK_IMPORTED_MODULE_1__elements_Tick__","PieSeries3DDataItem","depthValue","__WEBPACK_IMPORTED_MODULE_1__series_PieSeries__","PieSeries3D","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Slice3D__","depth","depthPercent","__WEBPACK_IMPORTED_MODULE_9__elements_Bullet__","ChordNode","__WEBPACK_IMPORTED_MODULE_2__axes_AxisLabelCircular__","updateRotation","__WEBPACK_IMPORTED_MODULE_4__core_elements_Slice__","__WEBPACK_IMPORTED_MODULE_5__core_utils_InterfaceColorSet__","invalidateLinks","sum","total","arc_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","_outgoingSorted","__WEBPACK_IMPORTED_MODULE_6__core_utils_Iterator__","link","linksContainer","nonRibbon","percentWidth","valueAngle","toNode","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramNode__","__WEBPACK_IMPORTED_MODULE_5__core_rendering_Path__","ChordLink","middleLine","__WEBPACK_IMPORTED_MODULE_3__core_elements_QuadraticCurve__","isTemplate","fromX","fromY","toX","toY","__WEBPACK_IMPORTED_MODULE_4__core_utils_Math__","cp","bulletsMask","positionBullets","mAngle1","mAngle2","cpx","cpy","__WEBPACK_IMPORTED_MODULE_1__FlowDiagramLink__","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","__WEBPACK_IMPORTED_MODULE_1__ColumnSeries__","TreeMapSeries","columns","configField","__WEBPACK_IMPORTED_MODULE_4__core_utils_InterfaceColorSet__","seriesDataItem","showReal","invalidateLayout","hideReal","appear","__WEBPACK_IMPORTED_MODULE_5__core_utils_Type__","removeChildren","column","__WEBPACK_IMPORTED_MODULE_6__core_elements_RoundedRectangle__","__WEBPACK_IMPORTED_MODULE_7__core_utils_Object__","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererX__","__WEBPACK_IMPORTED_MODULE_3__core_rendering_Path__","AxisRendererY3D","getWidth","__WEBPACK_IMPORTED_MODULE_1__axes_AxisRendererY__","ColumnSeries3DDataItem","__WEBPACK_IMPORTED_MODULE_1__series_ColumnSeries__","ColumnSeries3D","columnsContainer","_columnsContainer","createColumnTemplate","__WEBPACK_IMPORTED_MODULE_2__elements_Column3D__","column3D","Column3D","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Rectangle3D__","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateDataElementReal","validateCandlestick","lowLine_1","highLine_1","open_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeColumn","rangesColumns","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","__WEBPACK_IMPORTED_MODULE_3__elements_Candlestick__","OHLC","openLine","highLowLine","closeLine","__WEBPACK_IMPORTED_MODULE_1__Candlestick__","RadarColumn","radarColumn","getTooltipX","getTooltipY","ConeColumn","coneColumn","__WEBPACK_IMPORTED_MODULE_2__core_elements_3d_Cone__","window","am4charts","__WEBPACK_IMPORTED_MODULE_0__es2015_charts__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_74__internal_charts_cursors_RadarCursor__","GaugeChartDataItem","__WEBPACK_IMPORTED_MODULE_1__RadarChart__","GaugeChart","hands","__WEBPACK_IMPORTED_MODULE_3__elements_ClockHand__","processHand","PieChart3DDataItem","__WEBPACK_IMPORTED_MODULE_1__PieChart__","PieChart3D","invalidateDataUsers","__WEBPACK_IMPORTED_MODULE_2__series_PieSeries3D__","ChordDiagramDataItem","__WEBPACK_IMPORTED_MODULE_1__FlowDiagram__","ChordDiagram","nodePadding","chordContainer","nodesContainer","__WEBPACK_IMPORTED_MODULE_8__core_utils_Math__","newTotal","_sorted","strNode","node","getNodeValue","minNodeSize","links","createNode","__WEBPACK_IMPORTED_MODULE_5__elements_ChordNode__","createLink","__WEBPACK_IMPORTED_MODULE_6__elements_ChordLink__","__WEBPACK_IMPORTED_MODULE_5__utils_Type__","QuadraticCurve","__WEBPACK_IMPORTED_MODULE_2__utils_Color__","p1","p2","__WEBPACK_IMPORTED_MODULE_3__rendering_Path__","point1","__WEBPACK_IMPORTED_MODULE_4__utils_Math__","point2","__WEBPACK_IMPORTED_MODULE_1__Line__","__WEBPACK_IMPORTED_MODULE_10__core_utils_Array__","TreeMapDataItem","rows","hasChildren","level","color","TreeMap","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","__WEBPACK_IMPORTED_MODULE_6__core_utils_ColorSet__","sorting","__WEBPACK_IMPORTED_MODULE_4__axes_ValueAxis__","strictMinMax","xRenderer","axisFills","yRenderer","__WEBPACK_IMPORTED_MODULE_5__series_TreeMapSeries__","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","homeDataItem","_homeText","layoutItems","toggleBullets","_tempSeries","navigationData","parentDataItem","initSeries","createTreeSeriesReal","dataUsers","cursorOverStyle","__WEBPACK_IMPORTED_MODULE_7__core_interaction_Mouse__","zoomToSeriesDataItem","currentlyZoomed","rangeChangeAnimation","binaryTree","dice","sliceDice","handleDataItemValueChange","validateLayout","validateRawData","nodes","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","XYChart3DDataItem","XYChart3D","__WEBPACK_IMPORTED_MODULE_3__axes_AxisRendererX3D__","__WEBPACK_IMPORTED_MODULE_4__axes_AxisRendererY3D__","fixLayout","fixColumns","__WEBPACK_IMPORTED_MODULE_5__series_ColumnSeries3D__","clustered","depthIndex","s","i_1","OHLCSeriesDataItem","__WEBPACK_IMPORTED_MODULE_1__CandlestickSeries__","OHLCSeries","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","__WEBPACK_IMPORTED_MODULE_3__elements_OHLC__","StepLineSeriesDataItem","StepLineSeries","prevPoint","point0","vertical","noRisers","__WEBPACK_IMPORTED_MODULE_2__StepLineSeriesSegment__","StepLineSeriesSegment","previouosPoint","__WEBPACK_IMPORTED_MODULE_1__LineSeriesSegment__","RadarColumnSeriesDataItem","RadarColumnSeries","__WEBPACK_IMPORTED_MODULE_3__elements_RadarColumn__","lAngle","rAngle","tRadius","bRadius","getStartLocation","getEndLocation","cellAngle","offset","temp","setColumnStates","disableUnusedColumns","ConeSeriesDataItem","ConeSeries","__WEBPACK_IMPORTED_MODULE_2__elements_ConeColumn__","CircleBullet","circle","__WEBPACK_IMPORTED_MODULE_1__Bullet__","__WEBPACK_IMPORTED_MODULE_11__core_rendering_Path__","XYChartScrollbar","scrollbarChart","__WEBPACK_IMPORTED_MODULE_5__types_XYChart__","margin","_scrollbarChart","unselectedOverlay","_unselectedOverlay","background","thumbBackground","thumb","hoverState","downState","handleSeriesRemoved","sourceSeries","addXAxis","addYAxis","rangeChangeDuration","id","transitionDuration","zoomOutAxes","__WEBPACK_IMPORTED_MODULE_8__core_rendering_filters_DesaturateFilter__","updateByOrientation","handleDataChanged","updateThumb","__WEBPACK_IMPORTED_MODULE_1__core_elements_Scrollbar__","NavigationBarDataItem","__WEBPACK_IMPORTED_MODULE_2__core_DataItem__","NavigationBar","textLink","__WEBPACK_IMPORTED_MODULE_4__core_elements_TextLink__","paddingTop","paddingBottom","_linksIterator","triangle","__WEBPACK_IMPORTED_MODULE_5__core_elements_Triangle__","direction","marginLeft","separators","activeLink","fontWeight","__WEBPACK_IMPORTED_MODULE_8__core_utils_Percent__","validateDataElements","getLast","separator","__WEBPACK_IMPORTED_MODULE_1__core_Component__","__WEBPACK_IMPORTED_MODULE_16__core_utils_Type__","ColumnSeriesDataItem","_column","setColumn","__WEBPACK_IMPORTED_MODULE_15__core_utils_Array__","_rangesColumns","__WEBPACK_IMPORTED_MODULE_5__core_utils_Dictionary__","ColumnSeries","simplifiedProcessing","__WEBPACK_IMPORTED_MODULE_11__core_utils_Percent__","tooltipColorSource","baseAxisSeries","clusterCount","__WEBPACK_IMPORTED_MODULE_14__core_utils_Iterator__","l","r","t","percentHeight","maxWidth","maxHeight","__WEBPACK_IMPORTED_MODULE_7__axes_CategoryAxis__","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","rightLocation","leftLocation","itemWidth","itemHeight","change","droppedFromOpen","_dropFromOpenState","_riseFromOpenState","droppedFromPrevious","isInTransition","_columns","__WEBPACK_IMPORTED_MODULE_9__elements_Column__","_dropFromPreviousState","_riseFromPreviousState","legendDataItem","fromOpenState_1","fromPreviousState_1","__WEBPACK_IMPORTED_MODULE_10__core_elements_RoundedRectangle__","Column","__WEBPACK_IMPORTED_MODULE_2__core_elements_RoundedRectangle__"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, MultiDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t *\r\n\t * @type {List<Axis<AxisRendererX>>}\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t *\r\n\t * @type {Scrollbar}\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t *\r\n\t * @type {XYCursor}\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererX}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t *\r\n\t * @type {typeof AxisRendererY}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererX}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererY}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t *\r\n\t * @type {Button}\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t//$iter.each(this.series.iterator(), (series) => {\r\n\t\t//\tseries.appeared = false;\r\n\t\t//});\t\t\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// reset minimums\r\n\t\tthis.leftAxesContainer.minWidth = undefined;\r\n\t\tthis.rightAxesContainer.minWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererX();\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processXAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleXAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\taxis.renderer = new this._axisRendererY();\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n\t\taxis.events.on(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes events from the Axis when it is removed from the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<Axis>[\"removed\"]}  event  Event\r\n\t */\r\n\tpublic processYAxisRemoval(event: IListEvents<Axis>[\"removed\"]): void {\r\n\t\tlet axis: Axis = event.oldValue;\r\n\t\taxis.events.off(\"datarangechanged\", this.handleYAxisRangeChange, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]} event Range change event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n\t * @param {IRange}     range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {List<Axis>}  axes  A list of axes\r\n\t * @return {IRange}            Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", (event) => {\r\n\t\t\taxis.invalidateDataItems();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.processXAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return {List<Axis>} List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.processYAxisRemoval, this);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\t\t\tseries.xAxis; // this is enough to get axis, handled in getter\r\n\t\t\tseries.yAxis; // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param {XYCursor}  cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYCursor} Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n\t *\r\n\t * @return {this} New cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new XYCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tif (this.cursor.visible && !this.cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition);\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.tooltip.hide(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint}  position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position: IPoint): void {\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\t\tseriesPoints.push({ point: point, series: series });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.tooltip.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\tlet topSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t\tlet botSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\t\tfor (let i = 0; i < seriesPoints.length; i++) {\r\n\t\t\t\tif (seriesPoints[i].point.y < top + (bottom - top) / 2) {\r\n\t\t\t\t\ttopSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbotSeriesPoints.push(seriesPoints[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet nextY = top;\r\n\r\n\t\t\t//@todo: solve overlapping when tooltips are close to center\r\n\t\t\tfor (let i = 0; i < topSeriesPoints.length; i++) {\r\n\t\t\t\tlet series = topSeriesPoints[i].series;\r\n\t\t\t\tlet pointY = topSeriesPoints[i].point.y;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t}\r\n\r\n\t\t\tlet nextHeight = bottom;\r\n\t\t\tfor (let i = botSeriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\tlet series = botSeriesPoints[i].series;\r\n\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\tlet pointY = botSeriesPoints[i].point.y;\r\n\r\n\t\t\t\ttooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: nextHeight });\r\n\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttooltip.toBack();\r\n\t\t\t\t//@labeltodo\r\n\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n\t * @param {number}      position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param  {Axis}    axis   Axis\r\n\t * @param  {IRange}  range  Range\r\n\t * @return {IRange}         Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis, range: IRange): IRange {\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start;\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param {Scrollbar} scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Scrollbar} Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.xAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\tlet range: IRange = this.zoomAxes(this.yAxes, scrollbar.range);\r\n\t\tscrollbar.fixRange(range);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param  {List<Axis>}  axes       List of axes to zoom\r\n\t * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n\t * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n\t * @return {IRange}                 Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis>, range: IRange, instantly?: boolean, round?: boolean): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\trange.end = range.start + diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param {boolean} value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-speicifc data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  fields  Array of date fields\r\n\t * @return {string[]}          Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param  {string[]}  value  Array of number fields\r\n\t * @return {string[]}         Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0; i < yAxes.length; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0; i < xAxes.length; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return {this} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param {Button}  button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Button} Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param {XYChart} source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.xAxes.copyFrom(source.xAxes);\r\n\t\tthis.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tthis.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\t\t//@todo copy all container properties\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport { IDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxis}\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties[\"category\"];\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties[\"endCategory\"];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n *\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataFIelds}\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CategoryAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t *\r\n\t * @type {SerialChart}\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t *\r\n\t * @type {Dictionary}\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CategoryAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {CategoryAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries.start = this.start;\r\n\t\t\t\tseries.end = this.end;\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif(this.axisLength <= 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tlet startIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tlet endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = <CategoryAxisBreak>this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {CategoryAxisDataItem}  dataItem   [description]\r\n\t * @param {number}                itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tdataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.axisFill.location);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.axisFill.location);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label) {\r\n\t\t\tdataItem.text = dataItem.text; //@todo if this is left, kills custom data item text. this.adapter.apply(\"label\", dataItem.category);\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill) {\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CategoryAxisDataItem}  dataItem     Data item\r\n\t * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\tlet existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\tif (existingDataItem != dataItem) {\r\n\t\t\tthis.dataItems.remove(existingDataItem);\r\n\t\t}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {number}                     index     Index\r\n\t * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n\t * @return {number}                               Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet cellStartLocation = this.renderer.cellStartLocation;\r\n\t\tlet cellEndLocation = this.renderer.cellEndLocation;\r\n\r\n\t\tdifference -= cellStartLocation;\r\n\t\tdifference -= (1 - cellEndLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - cellStartLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param  {string}            category  Category name\r\n\t * @param  {AxisItemLocation}  location  Location (0-1)\r\n\t * @return {number}                      Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param  {string}  category  Category\r\n\t * @return {number}            Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.index;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param {string}  startCategory  Start category\r\n\t * @param {string}  endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {string}           start         [description]\r\n\t * @param  {string}           end           [description]\r\n\t * @param  {AxisItemLocation} startLocation [description]\r\n\t * @param  {AxisItemLocation} endLocation   [description]\r\n\t * @return {string}                         [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param  {number}            position  Source position (px)\r\n\t * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n\t * @return {number}                      Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Target series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Series data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\treturn <XYSeriesDataItem>series.dataItems.getIndex(this.positionToIndex(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {SeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}          key       Category\r\n\t * @param  {number}          location  Location (0-1)\r\n\t * @return {number}                    Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Category\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack key (?)\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\treturn this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {string}            Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {number}            Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= endIndex) {\r\n\t\t\tindex--;\r\n\t\t}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * Axis Label module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel, IAxisLabelProperties, IAxisLabelAdapters, IAxisLabelEvents } from \"./AxisLabel\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularProperties extends IAxisLabelProperties {\r\n\r\n\t/**\r\n\t * Rotation angle of the label in relation to circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\trelativeRotation?: number;\r\n\r\n\t/**\r\n\t * Distance of the label from circle line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisLabelCircular]].\r\n */\r\nexport interface IAxisLabelCircularEvents extends IAxisLabelEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisLabelCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisLabelCircularAdapters extends IAxisLabelAdapters, IAxisLabelCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nexport class AxisLabelCircular extends AxisLabel {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisLabelCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisLabelCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisLabelCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisLabelCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisLabelCircularEvents;\r\n\r\n\t/**\r\n\t * Related data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {any}\r\n\t */\r\n\tpublic _dataItem: any;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisLabelCircular\";\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\t\tthis.location = 0.5;\r\n\t\tthis.radius = 0;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Relative rotation of the label.\r\n\t *\r\n\t * It is an angle to circle. In case 90, labels will be positioned like rays\r\n\t * of light, if 0 - positione along the circle.\r\n\t *\r\n\t * @param {number} value Rotation angle\r\n\t */\r\n\tpublic set relativeRotation(value: number) {\r\n\t\tthis.setPropertyValue(\"relativeRotation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Rotation angle\r\n\t */\r\n\tpublic get relativeRotation(): number {\r\n\t\treturn this.getPropertyValue(\"relativeRotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance from axis circle to label in pixels.\r\n\t *\r\n\t * @param {number} value Distance (px)\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\t// No percent here, as it would be quite complicated to calculate radius\r\n\t\t// of a chart together with axis label radius\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Distance (px)\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [fixPoint description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {IPoint}  point       Label affixation point\r\n\t * @param  {number}  axisRadius  Distance from point (px)\r\n\t * @return {IPoint}              [description]\r\n\t */\r\n\tpublic fixPoint(point: IPoint, axisRadius: number): IPoint {\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();  //@todo\" check if we need this\r\n\t\t}\r\n\r\n\t\tlet sign: number = 1;\r\n\t\tif (this.inside) {\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\tlet relativeRotation = this.relativeRotation;\r\n\t\t// we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n\t\t// this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n\t\t// @todo with this math doesn't work well with inside = true\r\n\t\tthis.dy = -this._measuredHeight * (1 - (point.y + axisRadius) / (2 * axisRadius));\r\n\t\t// simmilar with dx\r\n\t\tthis.dx = -this._measuredWidth * (1 - (point.x + axisRadius) / (2 * axisRadius));\r\n\r\n\t\t//console.log(this.measuredWidth, this._measuredHeight, this.text, this.bbox.width)\r\n\r\n\t\tlet labelRadius: number = this.radius * sign;\r\n\r\n\t\tif ($type.isNumber(relativeRotation)) {\r\n\r\n\t\t\tlet pixelWidth = this.bbox.width;\r\n\t\t\tlet pixelHeight = this.bbox.height;\r\n\r\n\t\t\tif (angle > 90 || angle < -90) {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\trelativeRotation = 90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (relativeRotation == -90) {\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t\tif (relativeRotation == 90) {\r\n\t\t\t\t\trelativeRotation = -90;\r\n\t\t\t\t\tpixelWidth = 0;\r\n\t\t\t\t\tpixelHeight = - pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.rotation = relativeRotation + angle + 90;\r\n\r\n\t\t\tlet dH = $math.sin(relativeRotation) / 2;\r\n\t\t\tlet dW = $math.cos(relativeRotation) / 2;\r\n\r\n\t\t\tlet rotation = this.rotation;\r\n\r\n\t\t\tthis.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n\t\t\tthis.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\tlabelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpoint.x += $math.cos(angle) * labelRadius;\r\n\t\tpoint.y += $math.sin(angle) * labelRadius;\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisLabelCircular.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setProperty(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param {string}  category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setProperty(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string[]}  fields      Fields to check in\r\n\t * @param  {boolean}   working     Include working (temporary) values\r\n\t * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n\t * @return {number}                Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n *\r\n * @type {Object}\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t *\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t *\r\n\t * @type {CalculatedValue}\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tstacked?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @type {Axis}\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _xValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Array<string>}\r\n\t */\r\n\tprotected _yValueFields: Array<string>;\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYSeries}\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\r\n\t/**\r\n\t * dataitem of previously shown tooltip, used to avoid multiple tooltipshownat dispatches\r\n\t * @ignore\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.stacked = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t})\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {XYSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}            dataContext  Raw data\r\n\t * @param {number}            index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem);\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem);\r\n\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: keyof this[\"_dataFields\"] = <keyof this[\"_dataFields\"]>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Axis}        axis    Axis\r\n\t * @param {Array<Key>}  fields  Fields (?)\r\n\t * @param {Key}         field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}           field  Field\r\n\t * @param {CategoryAxis}  axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param {Key}       field  Field\r\n\t * @param {DateAxis}  axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param  {Axis}    axis  Axis\r\n\t * @return {string}        Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (!this._xAxis.get()) {\r\n\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.xAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (!this._yAxis.get()) {\r\n\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\tif (!axis) {\r\n\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.yAxis = axis;\r\n\t\t}\r\n\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param {Axis}  value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tthis._baseAxis = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\t// todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\t\t}\r\n\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\t\t\tif (this.appeared) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  xPosition  X\r\n\t * @param {number}  yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition));\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition));\r\n\t\t\t}\r\n\r\n\t\t\tthis.returnBulletDefaultState(dataItem);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n\r\n\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tfor (let a of dataItem.bullets) {\r\n\t\t\t\t\t\t\tlet bullet = a[1]\r\n\t\t\t\t\t\t\tbullet.setState(\"hover\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let a of this._prevTooltipDataItem.bullets) {\r\n\t\t\t\tlet bullet = a[1];\r\n\t\t\t\tbullet.setState(\"default\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationX(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of reveal animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanimation = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of hiding animation (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0)) {\r\n\t\t\t\tvalue = 0;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet delay: number = 0;\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tif ($type.isNumber(duration)) {\r\n\t\t\t\tinterpolationDuration = duration;\r\n\t\t\t}\r\n\t\t\tif (animation && !animation.isDisposed() && interpolationDuration == 0 && animation.duration > 0) {\r\n\t\t\t\tanimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\t\t//}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates series appearance when working value changes.\r\n\t */\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<SeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {string} value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return {string} [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {ValueAxis}  axis  Axis\r\n\t * @return {number}           value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthrow Error(\"`dataFields` is not set for series [\" + this.name + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem   [description]\r\n\t * @param {string}          xKey       [description]\r\n\t * @param {string}          yKey       [description]\r\n\t * @param {number}          locationX  [description]\r\n\t * @param {number}          locationY  [description]\r\n\t * @param {string}          stackKeyX  [description]\r\n\t * @param {string}          stackKeyY  [description]\r\n\t */\r\n\tprotected getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxis}\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param {Date}  date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param {Date} date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\tskipEmptyPeriods?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisDataFields}\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisDataItem}\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {DateAxisBreak}\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t * \r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @type {List<ITimeInterval>}\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the approperiate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t *\r\n\t * @type {Dictionary<TimeUnit, string>}\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _tooltipDateFormat: string;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _markUnitChange: boolean = true;\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Date}\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TimeUnit}\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t *\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _startLocation: AxisItemLocation = 0;\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tprotected _endLocation: AxisItemLocation = 1;\r\n\r\n\t/**\r\n\t * A collection of timestamps of previously processed data items. Used\r\n\t * internally to track distance between data items when processing data.\r\n\t *\r\n\t * @type {Dictionary<string, number>}\r\n\t */\r\n\tprotected _prevSeriesTime: Dictionary<string, number> = new Dictionary<string, number>();\r\n\r\n\t/**\r\n\t * [_minSeriesDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _minSeriesDifference: number = Number.MAX_VALUE;\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t *\r\n\t * @type {function}\r\n\t */\r\n\tpublic fillRule: (dataItem: DateAxisDataItem) => any = function(dataItem: DateAxisDataItem) {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {DateAxisDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return {DateAxisBreak} Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.floor(this.start * count) - 3; // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\t// TODO use $type.castNumber ?\r\n\t\t\t\tlet startIndex: number = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet endIndex: number = series.dataItems.findClosestIndex(this._maxZoomed - 1, (x) => <number>x[field], \"left\") + 1;\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tsuper.dataChangeUpdate();\r\n\t\tthis._minSeriesDifference = Number.MAX_VALUE;\r\n\r\n\t\t// use day duration if only one item. as this method is called before data is processed, we check data.length and not dataItems.length\r\n\t\tif (this.chart.data.length <= 1) {\r\n\t\t\tthis._minSeriesDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem} dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet startDate: Date = $time.round($time.copy(date), baseInterval.timeUnit, baseInterval.count);\r\n\t\t\tlet endDate: Date = $time.add($time.copy(startDate), baseInterval.timeUnit, baseInterval.count);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startDate.getTime(), \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tlet series: XYSeries = dataItem.component;\r\n\t\t\tseries.dataItemsByAxis.getKey(this.uid).setKey(startDate.getTime().toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakGridCount: number = this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start);\r\n\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\taxisBreak.gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {Date}    date           [description]\r\n\t * @param  {number}  intervalCount  [description]\r\n\t * @return {Date}                   [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\tnewDate = this.getBreaklessDate(axisBreak, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + 1);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {DateAxisBreak}  axisBreak  [description]\r\n\t * @param  {TimeUnit}       timeUnit   [description]\r\n\t * @param  {number}         count      [description]\r\n\t * @return {Date}                      [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count);\r\n\t\t$time.add(date, timeUnit, count);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate(new Date(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this._markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {DateAxisDataItem} dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, endPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label) {\r\n\t\t\t\t//label.invalidate();\r\n\t\t\t\t// when count == 1 this means label represents all the period between grid lines. so we center label because of that.\r\n\t\t\t\t// we don't do that through label.location because it would reset the setting\r\n\t\t\t\t/// and we do not do that to axis ranges\r\n\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\tposition = position + (endPosition - position) * label.location;\r\n\t\t\t\t\tendPosition = position;\r\n\t\t\t\t}\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return {number} Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param  {number}       min  Min timestamp\r\n\t * @param  {number}       max  Max timestamp\r\n\t * @return {IMinMaxStep}       Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\t\treturn value + this.baseDuration * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {number}         Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\treturn value + this.baseDuration * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param  {number}         index      [description]\r\n\t * @param  {number}         duration   [description]\r\n\t * @param  {number}         gridCount  [description]\r\n\t * @return {ITimeInterval}             [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param  {number}  value  Source value\r\n\t * @return {string}         Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param  {Date}    date  Date\r\n\t * @return {number}        Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param  {Date | number}  date  Date or a timestamp\r\n\t * @return {number}               Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param  {Date}  date Date\r\n\t * @return {IOrientationPoint} IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param  {number}  value  Value\r\n\t * @return {IOrientationPoint}  Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param  {number}  position  Position (px)\r\n\t * @return {Date}              Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @return {number}                      Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {XYSeriesDataItem}  dataItem  Data item\r\n\t * @param  {string}            key       Data field to get value from\r\n\t * @param  {number}            location  Location (0-1)\r\n\t * @param  {string}            stackKey  Stack ID\r\n\t * @return {number}                      Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(this.valueToPosition(value + stack));\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {XYSeriesDataItem}  dataItem  [description]\r\n\t * @param  {string}            key       [description]\r\n\t * @param  {number}            location  [description]\r\n\t * @return {number}                      [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param {XYSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// this is used to automatically define baseInterval\r\n\t\tlet sameItemTime: number;\r\n\t\t// actually here we should only get dates of this axis. But it's not likely that the chart will have more than one date axis with different baseInterval.\r\n\t\t// So using this approach would mean we'll have the same baseInterval for all date axes. In case user wants different timeIntervals for different date axes, he can manually set baseInterval\r\n\t\t$object.each(dataItem.dates, (key, date) => {\r\n\t\t\t//for (let key in dataItem.dates) {\r\n\t\t\t//let date: Date = dataItem.dates[key];\r\n\t\t\tlet prevSeriesTime: number = this._prevSeriesTime.getKey(key);\r\n\t\t\tlet time: number = date.getTime();\r\n\t\t\t// need to check time difference betweend dates of the same data item (for example open/close. they also influence minSeriesDifference)\r\n\t\t\tif ($type.isNumber(sameItemTime)) {\r\n\t\t\t\tlet difference: number = Math.abs(time - sameItemTime);\r\n\t\t\t\tif (this._minSeriesDifference > difference) {\r\n\t\t\t\t\tthis._minSeriesDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsameItemTime = time;\r\n\r\n\t\t\tlet differece: number = time - prevSeriesTime;\r\n\t\t\tif (differece > 0) {\r\n\t\t\t\tif (this._minSeriesDifference > differece) {\r\n\t\t\t\t\tthis._minSeriesDifference = differece;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._prevSeriesTime.setKey(key, time);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this._minSeriesDifference, 1);\r\n\t\t// handle short months\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t}\r\n\t\t// handle daylight saving\r\n\t\tif (this._minSeriesDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t}\r\n\r\n\t\tbaseInterval.count = 1; // good\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * @param {ITimeInterval} timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tthis._baseInterval = timeInterval;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ITimeInterval} Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Axis start location.\r\n\t *\r\n\t * * 0 - Full first cell is shown.\r\n\t * * 0.5 - Half of first cell is shown.\r\n\t * * 1 - None of the first cell is visible. (you probably don't want that)\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this._startLocation != value) {\r\n\t\t\tthis._startLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this._startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Axis end location.\r\n\t *\r\n\t * * 0 - None of the last cell is shown. (don't do that)\r\n\t * * 0.5 - Half of the last cell is shown.\r\n\t * * 1 - Full last cell is shown.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this._endLocation != value) {\r\n\t\t\tthis._endLocation = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this._endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @param {boolean}  value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param {string}  value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tif (this._tooltipDateFormat != value) {\r\n\t\t\tthis._tooltipDateFormat = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this._tooltipDateFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Use `changeDateFormats` to apply different formats to the first label in\r\n\t * bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this._markUnitChange != value) {\r\n\t\t\tthis._markUnitChange = value;\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this._markUnitChange;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position\r\n\t * @return {string}            Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}            position Source position\r\n\t * @param  {AxisItemLocation}  location  Location in the cell\r\n\t * @return {number}            Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\t\t$time.round(date, timeUnit, count);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count);\r\n\t\t\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param  {number}  position  Relative position\r\n\t * @return {number}            Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * @param  {XYSeries}          series    Series\r\n\t * @param  {number}            position  Position (px)\r\n\t * @return {XYSeriesDataItem}            Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number): XYSeriesDataItem {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem) {\r\n\t\t\t// to the left\r\n\t\t\tlet leftCount = 0;\r\n\t\t\tlet leftDataItem: XYSeriesDataItem;\r\n\t\t\tlet leftDate = new Date(date.getTime());\r\n\t\t\twhile (date.getTime() > this.minZoomed) {\r\n\t\t\t\tleftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n\t\t\t\tleftDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(leftDate.getTime().toString());\r\n\t\t\t\tif (leftDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tleftCount++;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightCount = 0;\r\n\t\t\tlet rightDataItem: XYSeriesDataItem;\r\n\t\t\tlet rightDate = new Date(date.getTime());\r\n\t\t\twhile (date.getTime() < this.maxZoomed) {\r\n\t\t\t\trightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t\t\t\trightDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(rightDate.getTime().toString());\r\n\t\t\t\tif (rightDataItem) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\trightCount++;\r\n\t\t\t}\r\n\r\n\t\t\tif (leftDataItem && !rightDataItem) {\r\n\t\t\t\treturn leftDataItem;\r\n\t\t\t}\r\n\t\t\telse if (!leftDataItem && rightDataItem) {\r\n\t\t\t\treturn rightDataItem;\r\n\t\t\t}\r\n\t\t\telse if (leftDataItem && rightDataItem) {\r\n\t\t\t\tif (leftCount < rightCount) {\r\n\t\t\t\t\treturn leftDataItem;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn rightDataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * @param  {number}  position  Relative position on axis (0-1)\r\n\t * @return {string}            Position label\r\n\t * @todo Better format recognition\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return {string}  Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0.5;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {IPoint} Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param {Date}     startDate       Start date\r\n\t * @param {Date}     endValue        End date\r\n\t * @param {boolean}  skipRangeEvent  Do not invoke events\r\n\t * @param {boolean}  instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorProperties}\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYCursorAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYCursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t *\r\n\t * @type {MutableValueDisposer<Sprite>}\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t *\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t *\r\n\t * @type {IRange}\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight }) });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 }) });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (this.behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.element.attr({ \"d\": $path.rectangle(w, h) });\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\r\n\t\tthis.updateLinePositions(point);\r\n\r\n\t\tif (this.downPoint) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.element.attr({ \"d\": \"\" });\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point, triggeredByPointer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tif (this.downPoint) {\r\n\t\t\tthis.upPoint = point;\r\n\r\n\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\tthis.getRanges();\r\n\r\n\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.selection.hide();\r\n\t\t\t}\r\n\r\n\t\t\tsuper.triggerUpReal(point, triggeredByPointer);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.selection;\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param {boolean} value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param {number} value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {Axis} axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tlet chart: XYChart = <XYChart>axis.chart;\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this),\r\n\t\t\t\taxis.events.on(\"validated\", chart.handleCursorPositionChange, chart)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": $path.rectangle(width, this.innerHeight, -width / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": $path.rectangle(this.innerWidth, height, 0, -height / 2) });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param {Sprite} lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param {Sprite} lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.element = this.paper.add(\"path\");\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param {Sprite} selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Sprite} Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis) && this.map.hasKey(config.xAxis)) {\r\n\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis) && this.map.hasKey(config.yAxis)) {\r\n\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment, ILineSeriesSegmentProperties } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeries}\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {LineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t *\r\n\t * @type {ListTemplate<this[\"_segment\"]>}\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t * @type {number}\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t *\r\n\t * @type {ListIterator<LineSeriesSegment>}\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment():this[\"_segment\"]{\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {LineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @param {number}             index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\t// this makes data items animate when added\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegment(this._workingStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegment(0, range);\r\n\t\t});\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number}        openIndex  [description]\r\n\t * @param {AxisDataItem}  axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet points: IPoint[] = [];\r\n\r\n\t\tlet endIndex: number = this._workingEndIndex;\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet connect: boolean = this.connect;\r\n\t\t\t\t\t// todo: other connect conditions\r\n\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment} segment    [description]\r\n\t * @param {IPoint[]}          points     [description]\r\n\t * @param {number}            openIndex  [description]\r\n\t * @param {number}            closeIndex [description]\r\n\t * @param {AxisDataItem}      axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem) {\r\n\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\tthis.openSegment(closeIndex, axisRange);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param  {object}             itemProperties  Item properties\r\n\t * @param  {LineSeriesSegment}  segment         Segment\r\n\t * @return {boolean}                            Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment?: LineSeriesSegment): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t//for (let propertyName in itemProperties) {\r\n\t\t\t//let value: any = itemProperties[propertyName];\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tif (segment) {\r\n\t\t\t\t\tif (segment.properties[<keyof ILineSeriesSegmentProperties>propertyName] != value) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connect\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\t\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\tline.copyFrom(<any>this);\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\tfill.copyFrom(<any>this);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\t\t\tif (bullet.copyToLegendMarker) {\r\n\r\n\t\t\t\t// do not copy bullets with labels\r\n\t\t\t\tlet hasLabels: boolean = false;\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!hasLabels) {\r\n\t\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\t\tclone.parent = marker;\r\n\t\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\t\tclone.x = w / 2;\r\n\t\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentPropertiess}\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ILineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ILineSeriesSegmentEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.element = this.paper.add(\"path\");\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.element = this.paper.add(\"path\");\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\tlet path: string = $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t//if(this.strokeOpacity > 0 || this.strokeSprite.strokeOpacity > 0){ // not good, range stroke is not drawn then\r\n\t\t\tthis.strokeSprite.element.attr({ \"d\": path });\r\n\t\t\t//}\r\n\r\n\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\tthis.fillSprite.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Defines Pie Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"./PieTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem, ILegendItem, LegendSettings } from \"../../charts/Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color, iRGB, color } from \"../../core/utils/Color\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { PieChart } from \"../types/PieChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeriesDataItem extends SeriesDataItem implements ILegendItem<DataItem, IDataItemEvents> {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _slice: Slice;\r\n\r\n\t/**\r\n\t * A reference to a slice label element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tprotected _label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * A reference to a slice tick element.\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieTick}\r\n\t */\r\n\tprotected _tick: PieTick;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t *\r\n\t * @type {LegendDataItem<DataItem, IDataItemEvents>}\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem<DataItem, IDataItemEvents>;\r\n\r\n\t/**\r\n\t * Custom settings for the legend item.\r\n\t * Not used, only added to sattisfy LegendDataItem\r\n\t *\r\n\t * @type {LegendSettings}\r\n\t * @ignore\r\n\t */\r\n\tpublic legendSettings: LegendSettings;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _component!: PieSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeriesDataItem\";\r\n\r\n\t\tthis.values.radiusValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param {boolean} value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean): void {\r\n\t\tsuper.setVisibility(value);\r\n\t\tif (value) {\r\n\t\t\tthis.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.setWorkingValue(\"value\", 0, 0, 0);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the slice element and returns its id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\treturn this.slice.uidAttr();\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the data item (and corresponding visual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {number}    toValue   Target value for animation\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): Animation {\r\n\t\treturn super.hide(duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Show hidden data item (and corresponding cisual elements).\r\n\t *\r\n\t * @param {number}    duration  Duration (ms)\r\n\t * @param {number}    delay     Delay hiding (ms)\r\n\t * @param {string[]}  fields    Fields to animate while hiding\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): Animation {\r\n\t\treturn super.show(duration, delay, [\"value\", \"radiusValue\"]);\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param {string}  value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Slice's radius, if other than default.\r\n\t *\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radiusValue(value: number) {\r\n\t\tthis.setValue(\"radiusValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radiusValue(): number {\r\n\t\treturn this.values.radiusValue.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a marker used in the legend for this slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Marker container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tthis.component.createLegendMarker(marker, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param {LegendDataItem<DataItem, IDataItemEvents>}  value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem<DataItem, IDataItemEvents>) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif(value.label){\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif(value.valueLabel){\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {LegendDataItem<DataItem, IDataItemEvents>} Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem<DataItem, IDataItemEvents> {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * A Pie Tick element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {PieTick} Tick element\r\n\t */\r\n\tpublic get tick(): PieTick {\r\n\t\tif (!this._tick) {\r\n\t\t\tthis._tick = this.component.ticks.create();\r\n\t\t\tthis._disposers.push(this._tick);\r\n\t\t\tthis.addSprite(this._tick);\r\n\t\t\tthis._tick.slice = this.slice;\r\n\t\t\tthis._tick.label = this.label;\r\n\t\t\tthis._tick.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._tick;\r\n\t}\r\n\r\n\t/**\r\n\t * A Label element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\tif (!this._label) {\r\n\t\t\tthis._label = this.component.labels.create();\r\n\t\t\tthis._disposers.push(this._label);\r\n\t\t\tthis.addSprite(this._label);\r\n\t\t\tthis._label.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._label;\r\n\t}\r\n\r\n\t/**\r\n\t * A Slice element, related to this data item. (slice)\r\n\t *\r\n\t * @readonly\r\n\t * @return {Slice} Slice element\r\n\t */\r\n\tpublic get slice(): this[\"_slice\"] {\r\n\t\tif (!this._slice) {\r\n\t\t\tthis._slice = this.component.slices.create();\r\n\t\t\tthis._disposers.push(this._slice);\r\n\t\t\tthis.addSprite(this._slice);\r\n\t\t\tthis._slice.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Should dataItem (slice) be hidden in legend?\r\n\t *\r\n\t * @param {boolean} value Visible in legend?\r\n\t */\r\n\tpublic set hiddenInLegend(value: boolean) {\r\n\t\tthis.setProperty(\"hiddenInLegend\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Disabled in legend?\r\n\t */\r\n\tpublic get hiddenInLegend(): boolean {\r\n\t\treturn this.properties.hiddenInLegend;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcategory?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be\r\n\t * hidden in legend.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\thiddenInLegend?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds boolean flag if item should be hidden.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvisible?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds item's radius value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tradiusValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * @default true\r\n\t * @type {number}\r\n\t */\r\n\talignLabels?: number;\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tcolors?: ColorSet;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries]].\r\n */\r\nexport interface IPieSeriesEvents extends ISeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeriesAdapters extends ISeriesAdapters, IPieSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries extends Series {\r\n\r\n\tpublic _chart: PieChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds current angle for the next slice to start on.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _currentStartAngle: number;\r\n\r\n\t/**\r\n\t * Data items that fall to the left side of the pie.\r\n\t */\r\n\tprotected _leftItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Data items that fall to the right side of the pie.\r\n\t */\r\n\tprotected _rightItems: this[\"_dataItem\"][];\r\n\r\n\t/**\r\n\t * Container slice elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic slicesContainer: Container;\r\n\r\n\t/**\r\n\t * Container tick elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic ticksContainer: Container;\r\n\r\n\t/**\r\n\t * Container label elements are put in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic labelsContainer: Container;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice>;\r\n\r\n\t/**\r\n\t * List of tick elements.\r\n\t *\r\n\t * @type {ListTemplate<PieTick>}\r\n\t */\r\n\tpublic ticks: ListTemplate<PieTick>;\r\n\r\n\t/**\r\n\t * List of label elements.\r\n\t *\r\n\t * @type {ListTemplate<AxisLabelCircular>}\r\n\t */\r\n\tpublic labels: ListTemplate<AxisLabelCircular>;\r\n\r\n\t/**\r\n\t * [_arcRect description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {IRectangle}\r\n\t */\r\n\tprotected _arcRect: IRectangle;\r\n\r\n\t/**\r\n\t * [_maxRadiusPercent description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tprotected _maxRadiusPercent: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PieSeries\";\r\n\r\n\t\tthis.alignLabels = true;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.colors.step = 1;\r\n\t\tthis.isMeasured = true;\r\n\t\tthis.calculatePercent = true;\r\n\r\n\t\tlet slicesContainer = this.createChild(Container);\r\n\t\tslicesContainer.shouldClone = false;\r\n\t\tslicesContainer.isMeasured = false;\r\n\t\tthis.slicesContainer = slicesContainer;\r\n\r\n\t\tlet ticksContainer = this.createChild(Container);\r\n\t\tticksContainer.shouldClone = false;\r\n\t\tticksContainer.isMeasured = false;\r\n\t\tticksContainer.layout = \"none\";\r\n\t\tthis.ticksContainer = ticksContainer;\r\n\r\n\t\tlet labelsContainer = this.createChild(Container);\r\n\t\tlabelsContainer.shouldClone = false;\r\n\t\tlabelsContainer.isMeasured = false;\r\n\t\tlabelsContainer.layout = \"none\";\r\n\t\tthis.labelsContainer = labelsContainer;\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.initSlice(Slice);\r\n\r\n\t\t// Create tick list\r\n\t\tlet tick = new PieTick();\r\n\t\ttick.isMeasured = false;\r\n\t\tthis.ticks = new ListTemplate<PieTick>(tick);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.ticks));\r\n\t\tthis._disposers.push(this.ticks.template);\r\n\r\n\t\t// Create labels list\r\n\t\t// @todo create a labelText/labelHTML properties just like\r\n\t\t// tooltipText/tooltipHTML\r\n\t\tlet label = new AxisLabelCircular();\r\n\t\tlabel.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n\t\tlabel.isMeasured = false;\r\n\t\tlabel.radius = 25;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t\tlabel.renderingFrequency = 2;\r\n\t\tthis.labels = new ListTemplate<AxisLabelCircular>(label);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.labels));\r\n\t\tthis._disposers.push(this.labels.template);\r\n\r\n\t\t// Make all slices focusable\r\n\t\tthis.skipFocusThreshold = 50;\r\n\r\n\t\t//let hiddenState = this.hiddenState;\r\n\t\t//hiddenState.properties.opacity = 1;\r\n\t\t//hiddenState.properties.endAngle = -90;\r\n\t\t//hiddenState.properties.startAngle = -90;\r\n\r\n\t\tlet defaultState = this.defaultState;\r\n\t\tdefaultState.transitionEasing = $ease.sinOut;\r\n\r\n\t\tlet hoverState = this.slices.template.states.create(\"hover\");\r\n\t\thoverState.properties.scale = 1.05;\r\n\r\n\t\t// Accessibility\r\n\t\tthis.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice}                    Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice): Slice {\r\n\t\t// Create a slice template\r\n\t\tlet slice = new sliceType();\r\n\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\t// Create slice hover state\r\n\t\tslice.states.create(\"hover\");\r\n\r\n\t\tlet defaultState = slice.defaultState;\r\n\t\tdefaultState.properties.shiftRadius = 0;\r\n\r\n\t\tslice.togglable = true;\r\n\r\n\t\tslice.events.on(\"toggled\", (event) => {\r\n\t\t\tevent.target.hideTooltip();\r\n\t\t});\r\n\r\n\t\tlet activeState = slice.states.create(\"active\");\r\n\t\tactiveState.properties.shiftRadius = 0.10;\r\n\r\n\t\tlet hiddenState = slice.hiddenState;\r\n\t\thiddenState.properties.visible = true;\r\n\t\thiddenState.properties.opacity = 1;\r\n\r\n\t\t// Create slices list\r\n\t\tthis.slices = new ListTemplate<Slice>(slice);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.slices));\r\n\t\tthis._disposers.push(this.slices.template);\r\n\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (Math.abs(this.startAngle - this.endAngle) < 0.01) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tthis._leftItems = [];\r\n\t\tthis._rightItems = [];\r\n\r\n\t\tthis._currentStartAngle = this.startAngle;\r\n\t\tthis._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n\r\n\t\tthis._maxRadiusPercent = 0;\r\n\t\tfor (let i = this.startIndex; i < this.endIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet radiusValuePercent = dataItem.values.radiusValue.percent;\r\n\t\t\tif (radiusValuePercent > this._maxRadiusPercent) {\r\n\t\t\t\tthis._maxRadiusPercent = radiusValuePercent;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tif (this.startAngle > this.endAngle) {\r\n\t\t\t\tthis._rightItems.reverse();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._leftItems.reverse()\r\n\t\t\t}\r\n\t\t\tthis.arrangeLabels(this._rightItems);\r\n\t\t\tthis.arrangeLabels(this._leftItems);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (this.radius > 0) {\r\n\r\n\t\t\tlet percent = dataItem.values.value.percent;\r\n\r\n\t\t\t// SLICE\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\tslice.parent = this.slicesContainer;\r\n\t\t\tslice.radius = this.radius;\r\n\r\n\t\t\tif ($type.isNumber(dataItem.radiusValue)) {\r\n\t\t\t\tslice.radius *= dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n\t\t\t}\r\n\r\n\t\t\tslice.innerRadius = this.innerRadius;\r\n\t\t\tslice.startAngle = this._currentStartAngle;\r\n\r\n\t\t\tslice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n\r\n\t\t\t// LABEL\r\n\t\t\tlet label = dataItem.label;\r\n\t\t\tlabel.parent = this.labelsContainer;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\ttick.parent = this.ticksContainer;\r\n\r\n\t\t\tlet normalizedMiddleAngle: number = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n\r\n\t\t\tlet point: IPoint;\r\n\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tlet x: number = tick.length + label.radius;\r\n\r\n\t\t\t\tlabel.verticalCenter = \"middle\";\r\n\t\t\t\tlet arcRect = this._arcRect;\r\n\t\t\t\t// right half\r\n\t\t\t\tif (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 91) { // 91 makes less chances for flickering\r\n\t\t\t\t\tx += (arcRect.width + arcRect.x) * this.radius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"left\";\r\n\t\t\t\t\tthis._rightItems.push(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\t// left half\r\n\t\t\t\telse {\r\n\t\t\t\t\tx -= arcRect.x * this.radius;\r\n\t\t\t\t\tlabel.horizontalCenter = \"right\";\r\n\t\t\t\t\tthis._leftItems.push(dataItem);\r\n\t\t\t\t\tx *= -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet distance = this.radius + tick.length + label.radius;\r\n\t\t\t\tpoint = { x: x, y: slice.iy * distance };\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x: number = slice.ix * slice.radius;\r\n\t\t\t\tlet y: number = slice.iy * slice.radiusY;\r\n\t\t\t\tpoint = label.fixPoint({ x: x, y: y }, slice.radius);\r\n\t\t\t}\r\n\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis._currentStartAngle += slice.arc;\r\n\r\n\t\t\t// Apply accessibility\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tslice.role = \"menuitem\";\r\n\t\t\t\tslice.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tslice.role = \"listitem\";\r\n\t\t\t\tslice.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply screen reader label\r\n\t\t\tif (slice.focusable) {\r\n\t\t\t\tslice.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t});\r\n\t\t\t\tslice.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (slice.hoverable) {\r\n\t\t\t\tslice.events.once(\"over\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t});\r\n\t\t\t\tslice.events.once(\"out\", (ev) => {\r\n\t\t\t\t\tslice.readerTitle = \"\";\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (slice.fill == undefined) {\r\n\t\t\t\tslice.fill = this.colors.getIndex(dataItem.index * this.colors.step);\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif (slice.stroke == undefined) {\r\n\t\t\t\tslice.stroke = this.colors.getIndex(dataItem.index * this.colors.step);\r\n\t\t\t}\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Arranges slice labels according to position settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"][]}  dataItems  Data items\r\n\t */\r\n\tprotected arrangeLabels(dataItems: this[\"_dataItem\"][]): void {\r\n\t\tfor (let i: number = 0; i < dataItems.length; i++) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = dataItems[i];\r\n\r\n\t\t\tlet label: AxisLabelCircular = dataItem.label;\r\n\r\n\t\t\tif (label) {\r\n\t\t\t\tif (i < dataItems.length - 1) {\r\n\t\t\t\t\tlet nextLabel: AxisLabelCircular = this.getNextLabel(i + 1, dataItems);\r\n\r\n\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet bottom: number = label.pixelY + label.measuredHeight;\r\n\r\n\t\t\t\t\tif (nextLabel) {\r\n\t\t\t\t\t\tif (nextLabel.y < bottom) {\r\n\t\t\t\t\t\t\tnextLabel.y = bottom;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next label according to `index`.\r\n\t *\r\n\t * @param  {number}              index      Current index\r\n\t * @param  {PieSerisDataItem[]}  dataItems  Data items\r\n\t * @return {AxisLabelCircular}              Label element\r\n\t */\r\n\tprotected getNextLabel(index: number, dataItems: this[\"_dataItem\"][]): AxisLabelCircular {\r\n\t\tif (dataItems.length >= index) {\r\n\t\t\tlet nextDataItem: this[\"_dataItem\"] = dataItems[index];\r\n\t\t\tif (nextDataItem) {\r\n\t\t\t\tif (nextDataItem.label) {\r\n\t\t\t\t\treturn nextDataItem.label;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getNextLabel(index + 1, dataItems);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius for the series' slices in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle for the series' slices in degrees. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Redo so that users can set it\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Align labels into nice vertical columns?\r\n\t *\r\n\t * This will ensure that labels never overlap with each other.\r\n\t *\r\n\t * Arranging labels into columns makes them more readble, and better user\r\n\t * experience.\r\n\t *\r\n\t * If set to `false` labels will be positioned at `label.radius` distance,\r\n\t * and may, in some cases, overlap.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Align labels?\r\n\t */\r\n\tpublic set alignLabels(value: boolean) {\r\n\t\tthis.setPropertyValue(\"alignLabels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Align labels?\r\n\t */\r\n\tpublic get alignLabels(): boolean {\r\n\t\treturn this.getPropertyValue(\"alignLabels\");\r\n\t}\r\n\r\n\t/**\r\n\t * A color set to be used for slices.\r\n\t *\r\n\t * For each new subsequent slice, the chart will assign the next color in\r\n\t * this set.\r\n\t *\r\n\t * @param {ColorSet}  value  Color set\r\n\t */\r\n\tpublic set colors(value: ColorSet) {\r\n\t\tthis.setPropertyValue(\"colors\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {ColorSet} Color set\r\n\t */\r\n\tpublic get colors(): ColorSet {\r\n\t\treturn this.getPropertyValue(\"colors\");\r\n\t}\r\n\r\n\t/**\r\n\t * Binds related legend data item's visual settings to this series' visual\r\n\t * settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}          marker    Container\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic createLegendMarker(marker: Container, dataItem?: this[\"_dataItem\"]): void {\r\n\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\tlet slice: Slice = dataItem.slice;\r\n\t\t\t// todo: make an easy possibility to bind visual properties\r\n\t\t\t//child.bind(\"fill\", slice);\r\n\t\t\t//child.bind(\"stroke\", slice);\r\n\t\t\t//child.bind(\"fillOpacity\", slice);\r\n\t\t\t//child.bind(\"strokeOpacity\", slice);\r\n\r\n\t\t\tslice.events.on(\"propertychanged\", (ev)=>{\r\n\t\t\t\tchild.defaultState.properties.fill = slice.fill;\r\n\t\t\t\tchild.defaultState.properties.stroke = slice.stroke;\r\n\t\t\t\tchild.defaultState.properties.fillOpacity = slice.fillOpacity;\r\n\t\t\t\tchild.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n\t\t\t\r\n\t\t\t\tif(ev.property == \"fill\"){\r\n\t\t\t\t\tif(!child.isActive){\r\n\t\t\t\t\t\tchild.fill = slice.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(ev.property == \"stroke\"){\r\n\t\t\t\t\tif(!child.isActive){\r\n\t\t\t\t\t\tchild.stroke = slice.stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Bullet}  bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: Slice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tlet angle = slice.startAngle + slice.arc * locationX;\r\n\t\tlet radius = locationY * slice.radius;\r\n\r\n\t\tbullet.x = radius * $math.cos(angle);\r\n\t\tbullet.y = radius * $math.sin(angle);\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullets when slice's size changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceScale(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tlet slice: Slice = event.target;\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t$iter.each(dataItem.bullets.iterator(), (a) => {\r\n\t\t\tlet value = a[1];\r\n\t\t\tthis.positionBullet(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions bullet and labels when slice moves.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n\t */\r\n\tprotected handleSliceMove(event: AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tlet slice: Slice = event.target;\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>slice.dataItem;\r\n\t\t\t// moving textelement, as label dx and dy are already employed for aligning\r\n\t\t\t//@labeltodo\r\n\t\t\tdataItem.label.dx = slice.dx + slice.pixelX;\r\n\t\t\tdataItem.label.dy = slice.dy + slice.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[PieSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.slices.template.copyFrom(source.slices.template);\r\n\t\tthis.labels.template.copyFrom(source.labels.template);\r\n\t\tthis.ticks.template.copyFrom(source.ticks.template);\r\n\t}\r\n\r\n\tprotected getContainerBBox(): IRectangle {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\treturn $math.getArcRect(chart.startAngle, chart.endAngle, this.radius);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn $math.getArcRect(this.startAngle, this.endAngle, this.radius);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {GridCircular}\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisFillCircular}\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"radius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPropertyValue(\"innerRadius\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet element = this.line.element;\r\n\r\n\t\t// @todo Is this needed?\r\n\t\tthis.chart;\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\telement.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius) });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick         Tick element\r\n\t * @param {number}    position     Starting position\r\n\t * @param {number}    endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) }) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.fixPoint(point, this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {GridCircular} Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisFillCircular} Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return {AxisLabelCircular} Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularProperties}\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisFillCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisFillCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @type {string}\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.element.attr({ \"d\": this.fillPath });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param {number}  value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { Axis, AxisItemLocation } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularProperties}\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGridCircularAdapters}\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGridCircularEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param {number | Percent} value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarChartProperties}\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererCircular}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t *\r\n\t * @type {AxisRendererRadial}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {RadarCursor}\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleXAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleXAxisRangeChange(event);\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t *\r\n\t * @param {AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]}  event  Event\r\n\t */\r\n\tprotected handleYAxisRangeChange(event: AMEvent<Axis, IComponentEvents>[\"datarangechanged\"]) {\r\n\t\tsuper.handleYAxisRangeChange(event);\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarCursor} Cursor\r\n\t */\r\n\tprotected createCursor(): this[\"_cursor\"] {\r\n\t\treturn new RadarCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet radarCont = this.radarContainer;\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.element.attr({ \"d\": $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius) });\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return {RadarSeries} New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param {number | Percent} value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Axis} axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICategoryAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICategoryAxisBreakEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Axis}\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return {number} Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param {string}  value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param {string}  value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IDisposer, MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t *\r\n\t * @type {Date}\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakProperties}\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IDateAxisBreakAdapters}\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IDateAxisBreakEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {ITimeInterval}\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Date}\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param {Date} value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param {Date} value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataRange();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Date} End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorProperties}\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICursorAdapters}\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t *\r\n\t * @type {IPoint}\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @type {IPoint}\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @type {number}\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t *\r\n\t * @type {\"zoom\" | \"select\"}\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.background.fillOpacity = 0.5;\r\n\t\t//this.background.fill = color(\"#dadada\");\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionObjectEvents[\"track\"]} event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\t\tif (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * If `triggeredByPointer == false` the cursor will stay there, regardless\r\n\t * movement of the actual pointer(s). This is useful when you want to\r\n\t * manually place cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerMove(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tthis.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param {IPoint}   point               Point to place cursor at\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, triggeredByPointer?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = point;\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerDown(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerDownReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tpublic triggerUp(point: IPoint, triggeredByPointer?: boolean) {\r\n\t\tthis.triggerUpReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param {IPoint}   point               Point of action\r\n\t * @param {boolean}  triggeredByPointer  Was this triggered by actual pointer?\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint, triggeredByPointer?: boolean) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\t\tif ($math.getDistance(this.upPoint, this.downPoint) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t}\r\n\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"down\"]} event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerDown(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IInteractionEvents[\"up\"]} event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis.triggerMove(local, true);\r\n\t\tthis.triggerUp(local, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param {Chart}  value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Chart} Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarSeries}\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {RadarSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarSeriesDataItem} dataItem  [description]\r\n\t * @param {string}              xKey      [description]\r\n\t * @param {string}              yKey      [description]\r\n\t * @param {number}              locationX [description]\r\n\t * @param {number}              locationY [description]\r\n\t * @param {string}              stackKeyX [description]\r\n\t * @param {string}              stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}          points    [description]\r\n\t * @param {this[\"_dataItem\"]} dataItem  [description]\r\n\t * @param {string}            xField    [description]\r\n\t * @param {string}            yField    [description]\r\n\t * @param {boolean}           backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {LineSeriesSegment}  segment      [description]\r\n\t * @param {IPoint[]}           points       [description]\r\n\t * @param {IPoint[]}           closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value);\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IRadarCursorProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {IRadarCursorAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarCursorEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Chart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point  Point to check\r\n\t * @return {boolean}         Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\t\tlet angle = $math.getAngle(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param {number} value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, triggeredByPointer?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, triggeredByPointer);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle)) {\r\n\r\n\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param {IPoint} point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.element.attr({ \"d\": path });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.element.attr({ \"d\": path });\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return {number} Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @type {\"circles\" | \"polygons\"}\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {AxisRendererAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererRadialEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return {number} Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return {number} Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value)\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return {number} Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarChart} value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {RadarChart} Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {IPoint}            Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.element.attr({ \"d\": $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) }) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.element.attr({ \"d\": path });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisLabel}  label        Label element\r\n\t * @param {number}     position     Starting position\r\n\t * @param {number}     endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * label.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {IPoint}   point Point coordinates\r\n\t * @return {boolean}         Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"startAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tthis.setPropertyValue(\"endAngle\", value);\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param {number}  value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @type {\"circles\" | \"polygons\"} Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param  {number}  startPosition  Starting position\r\n\t * @param  {number}  endPosition    End position\r\n\t * @return {string}                 SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisBreak} axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {AxisTick}  tick      Tick element\r\n\t * @param {number}    position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) }) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {number}  position  Position (0-1)\r\n\t * @return {number}            Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t * @type {number}\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t * @type {number}\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @type {\"any\" | \"clockWise\" | \"CounterClockWise\"}\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandProperties}\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IClockHandAdapters}\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IClockHandEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * @type {Trapezoid}\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t *\r\n\t * @type {MutableValueDisposer<Axis>}\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param {Circle}  pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Circle} Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param {Trapezoid}  hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Trapezoid} Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param {number | Percent}  value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param {number}  value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param {any}     value     New value\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t * @param {(value:number)=>number}  easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param {any}  value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {any} Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param {Axis}  axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"valueschanged\", () => this.updateValue()),\r\n\t\t\t\taxis.events.on(\"propertychanged\", () => this.invalidate())\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Axis} Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, IListEvents, ListTemplate } from \"../../core/utils/List\";\r\nimport { Legend, ILegendItem } from \"../Legend\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart}\r\n\t */\r\n\tpublic _component!: PieChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart]].\r\n */\r\nexport interface IPieChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart]]\r\n */\r\nexport interface IPieChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * Outer radius of the pie.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Relative inner radius (0-1).\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tinnerRadius?: number;\r\n\r\n\t/**\r\n\t * An angle pie starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle pie ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart]].\r\n */\r\nexport interface IPieChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChartAdapters extends ISerialChartAdapters, IPieChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChartProperties}\r\n\t */\r\n\tpublic _properties!: IPieChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: PieSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.innerRadius = 0;\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tlet seriesContainer = this.seriesContainer;\r\n\t\tseriesContainer.isMeasured = true;\r\n\t\tseriesContainer.valign = \"middle\";\r\n\t\tseriesContainer.align = \"center\";\r\n\t\tseriesContainer.layout = \"absolute\";\r\n\t\tseriesContainer.width = undefined;\r\n\t\tseriesContainer.height = undefined;\r\n\r\n\t\t// so that the pie is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tthis.invalidate();\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pie chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis.updateRadius();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates pie's radius, based on a number of criteria.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRadius(): void {\r\n\r\n\t\tlet chartCont = this.chartContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for radar also)\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n\r\n\t\tlet seriesRadius = (radius - pixelInnerRadius) / this.series.length;\r\n\t\t//@todo: make it possible to set series radius in percent\r\n\t\t$iter.each($iter.indexed(this.series.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet series = a[1];\r\n\t\t\t// todo: set this on default state instead?\r\n\t\t\tseries.radius = pixelInnerRadius + seriesRadius * (i + 1);\r\n\t\t\tseries.innerRadius = pixelInnerRadius + seriesRadius * i;\r\n\t\t\tseries.startAngle = this.startAngle;\r\n\t\t\tseries.endAngle = this.endAngle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: ILegendItem<DataItem, IDataItemEvents>[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlegendData.push(<PieSeriesDataItem>dataItem);\r\n\r\n\t\t\t\t\tlet legendSettings = series.legendSettings;\r\n\t\t\t\t\tif (legendSettings) {\r\n\t\t\t\t\t\tif (legendSettings.labelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.labelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemLabelText) {\r\n\t\t\t\t\t\t\tlegend.labels.template.text = legendSettings.itemLabelText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.valueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.valueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (legendSettings.itemValueText) {\r\n\t\t\t\t\t\t\tlegend.valueLabels.template.text = legendSettings.itemValueText;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius of the pie chart.\r\n\t *\r\n\t * Setting to a number will mean a fixed pixel radius.\r\n\t *\r\n\t * Setting to an instance of [[Percent]] will mean a relative radius to\r\n\t * available space.\r\n\t *\r\n\t * E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * // Set pie chart to be at 50% of the available space\r\n\t * pieChart.radius = am4core.percent.percent(50);\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // Set pie chart to be at 50% of the available space\r\n\t *   \"radius\": \"50%\"\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {number | Percent}  value  Radius (px or relative)\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px or relative)\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets relative inner radius (to create a donut chart).\r\n\t *\r\n\t * The inner radius is relative to pie's radius:\r\n\t * * 0 - solid pie (no hole inside);\r\n\t * * 0.5 - hole is half the radius of the pie;\r\n\t * * 1 - does not make sense, because the hole will take up the whole radius.\r\n\t *\r\n\t * @param {number | Percent}  value  Relative inner radius (0-1)\r\n\t * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Relative inner radius (0-1)\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PieSeries]].\r\n\t *\r\n\t * @return {PieSeries} New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n\t * at the top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the Pie circle. (degrees)\r\n\t *\r\n\t * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n\t * at the top center. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to change this setting.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set to those lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default 270\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (pieSeriesDataItem.visible && !pieSeriesDataItem.isHiding) {\r\n\t\t\t\t\tpieSeriesDataItem.slice.isHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet pieSeriesDataItem: PieSeriesDataItem = <PieSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tpieSeriesDataItem.slice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart.ts","/**\r\n * Pie tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { PieSeries } from \"./PieSeries\"\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[PieTick]].\r\n */\r\nexport interface IPieTickProperties extends ITickProperties { }\r\n\r\n/**\r\n * Defines events for [[PieTick]].\r\n */\r\nexport interface IPieTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieTickAdapters extends ITickAdapters, IPieTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nexport class PieTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickProperties}\r\n\t */\r\n\tpublic _properties!: IPieTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieTickAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieTickEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<AxisLabelCircular>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<Slice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieTick\";\r\n\t\tthis.element = this.paper.add(\"polyline\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: Slice = this.slice;\r\n\t\tlet label = this.label;\r\n\r\n\t\tlet series = <PieSeries>slice.dataItem.component;\r\n\r\n\t\tif (slice && slice.radius > 0 && label && label.text) {\r\n\t\t\tlet x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n\t\t\tlet y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radius * slice.scale;\r\n\r\n\t\t\tlet x1: number;\r\n\t\t\tlet y1: number;\r\n\r\n\t\t\tlet x2: number;\r\n\t\t\tlet y2: number;\r\n\r\n\t\t\tif (series.alignLabels) {\r\n\t\t\t\tx1 = label.pixelX - this.length;\r\n\t\t\t\ty1 = label.pixelY;\r\n\r\n\t\t\t\tx2 = label.pixelX;\r\n\t\t\t\ty2 = y1;\r\n\r\n\t\t\t\tif (label.horizontalCenter == \"right\") {\r\n\t\t\t\t\tx1 += 2 * this.length;\r\n\t\t\t\t\tx2 = x1 - this.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tx1 = x0 + label.radius * slice.ix;\r\n\t\t\t\ty1 = y0 + label.radius * slice.iy;\r\n\r\n\t\t\t\tx2 = x1;\r\n\t\t\t\ty2 = y1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Slice element tick is attached to.\r\n\t *\r\n\t * @param {Slice}  slice  Slice\r\n\t */\r\n\tpublic set slice(slice: Slice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Slice} Slice\r\n\t */\r\n\tpublic get slice(): Slice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Label element tick is attached to.\r\n\t *\r\n\t * @param {AxisLabelCircular}  label  Label\r\n\t */\r\n\tpublic set label(label: AxisLabelCircular) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this));\r\n\t}\r\n\r\n\t/**\r\n\t * @return {AxisLabelCircular} Label\r\n\t */\r\n\tpublic get label(): AxisLabelCircular {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieTick.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { OrderedList, OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Slice3D}\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param {number}  value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieSeries3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3DDataItem}\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t *\r\n\t * @type {ListTemplate<Slice3D>}\r\n\t */\r\n\tpublic slices: ListTemplate<Slice3D>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return {PieSeries3DDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new slice element.\r\n\t *\r\n\t * @param  {typeof Slice}  sliceType  Type of the slice element\r\n\t * @return {Slice3D}                  Slice\r\n\t */\r\n\tprotected initSlice(sliceType: typeof Slice3D): Slice3D {\r\n\t\tlet slice: Slice3D = <Slice3D>super.initSlice(Slice3D);\r\n\t\treturn slice;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {PieSeries3DDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor(let i = this._workingStartIndex; i < this._workingEndIndex; i++){\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tvar startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/*\r\n\t\tset startAngle(value: number) {\r\n\t\t\t// 3d pie series can start at 90 angle increments, otherwise big slices might overlap incorrectly\r\n\t\t\tvalue = $math.normalizeAngle(value);\r\n\t\t\tvalue = $math.round(value / 90) * 90;\r\n\r\n\t\t\tthis.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n\t\t}\r\n\r\n\t\tget startAngle(): number {\r\n\t\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t\t}\r\n\t*/\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordNodeProperties}\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordNodeAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordNodeEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t *\r\n\t * @type {List<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t *\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t * @type {Iterator<ChordDiagramDataItem>}\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t *\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t *\r\n\t * @type {AxisLabelCircular}\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tthis.label = this.createChild(AxisLabelCircular);\r\n\t\tthis.label.location = 0.5;\r\n\t\tthis.label.radius = 5;\r\n\t\tthis.label.text = \"{name}\";\r\n\t\tthis.label.zIndex = 1;\r\n\t\tthis.label.shouldClone = false;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet activeState = this.states.create(\"active\");\r\n\t\tactiveState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.innerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.innerRadius) / 2);\r\n\t\t})\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\r\n\t\t\tlet arc = slice.arc;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = slice.startAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = slice.startAngle + arc * label.location;\r\n\t\t\tlet startAngle = slice.startAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = slice.startAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlet x = slice.radius * $math.cos(labelAngle);\r\n\t\t\tlet y = slice.radius * $math.sin(labelAngle);\r\n\r\n\t\t\tlet point = { x: x, y: y };\r\n\t\t\tlabel.fixPoint(point, slice.radius);\r\n\t\t\tlabel.moveTo(point);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = slice.startAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.innerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.innerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = slice.startAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\r\n\t\tlet mAngle = this.trueStartAngle + this.slice.arc / 2;\r\n\r\n\t\tlet tx = this.slice.radius * $math.cos(mAngle);\r\n\t\tlet ty = this.slice.radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tthis.slice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param {ChordNode}  source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordLinkProperties}\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordLinkAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordLinkEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t * @type Polyspline\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\t\t\t\tlet x3 = radius * $math.cos(endAngle + arc) + toX;\r\n\t\t\t\tlet y3 = radius * $math.sin(endAngle + arc) + toY;\r\n\t\t\t\tlet x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n\t\t\t\tlet y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.element.attr({ \"d\": path });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.element.attr({ \"d\": \"\" });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.element.attr({ \"d\": path });\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\t\t\t\tthis.positionBullets();\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\t\t\t\tlet mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {number} value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param {Object}  value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return {Object} Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return {string} Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.treeMapDataItem.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return {TreeMapDataItem} Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ITreeMapSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n\t * @param {Object}                 dataContext  Raw data\r\n\t * @param {number}                 index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {TreeMapSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade in (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\treturn dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.getValue(\"value\"), interpolationDuration);\r\n\t\t});\r\n\r\n\t\tlet animation = super.showReal(duration);\r\n\r\n\t\tif (animation && !animation.isDisposed()) {\r\n\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\tthis.chart.invalidateLayout();\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t\tthis.chart.invalidateLayout();\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param  {number}     duration  Duration of fade out (ms)\r\n\t * @return {Animation}            Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\t\t\tlet interpolationDuration = this.interpolationDuration;\r\n\t\t\tdataItem.treeMapDataItem.setWorkingValue(\"value\", 0, interpolationDuration);\r\n\t\t});\r\n\t\t\r\n\t\tlet animation = super.hideReal(duration);\r\n\r\n\t\tif (animation && !animation.isDisposed()) {\r\n\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\tthis.chart.invalidateLayout();\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\t\t\r\n\t\tthis.chart.invalidateLayout();\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\tpublic appear(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t * @type {IAxisRendererX3DProperties}\r\n\t * @ignore\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t * @type {AxisRendererAdapters}\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererX3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D;\r\n\t\tlet dy = this.chart.dy3D;\r\n\t\tthis.baseGrid.element.attr({ \"d\": $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h }) });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D} value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DProperties}\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IAxisRendererY3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IAxisRendererY3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param {Axis} axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Grid}    grid         Grid element\r\n\t * @param {number}  position     Starting position\r\n\t * @param {number}  endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D;\r\n\t\t\tlet dy: number = this.chart.dy3D;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.element.attr({ \"d\": $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.element.attr({\r\n\t\t\t\"d\": $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t\t+ $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D })\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {XYChart3D}  value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {XYChart3D} Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Column3D}\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeries3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeries3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {XYChart3D}\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\t// @martynas: need to check aria-things here.\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns SVG path to use as a mask for the series.\r\n\t *\r\n\t * @return {string} Mask path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet w: number = this.xAxis.axisLength;\r\n\t\tlet h: number = this.yAxis.axisLength;\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\treturn $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {number}  value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {number} Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DProperties}\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumn3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumn3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\tvalidate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Candlestick}\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {CandlestickSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\thighDateY?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {CandlestickSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesProperties}\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICandlestickSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICandlestickSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: keyof this[\"_dataFields\"];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {CandlestickSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]){\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\t\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <keyof this[\"_dataFields\"]>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <keyof this[\"_dataFields\"]>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <keyof this[\"_dataFields\"]>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <keyof this[\"_dataFields\"]>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IOHLCProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IOHLCAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t * @type {Line}\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\t\t\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\t\t\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return {number} Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnProperties}\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = 312\n// module chunks = 4","/**\n * Module: gauge\n */\n\n/**\n * Elements: types\n */\nexport { GaugeChartDataItem, IGaugeChartDataFields, IGaugeChartProperties, IGaugeChartEvents, IGaugeChartAdapters, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\nexport { RadarChartDataItem, IRadarChartDataFields, IRadarChartProperties, IRadarChartEvents, IRadarChartAdapters, RadarChart } from \"./.internal/charts/types/RadarChart\";\nexport { XYChartDataItem, IXYChartDataFields, IXYChartProperties, IXYChartEvents, IXYChartAdapters, XYChart } from \"./.internal/charts/types/XYChart\";\nexport { SerialChartDataItem, ISerialChartDataFields, ISerialChartProperties, ISerialChartEvents, ISerialChartAdapters, SerialChart } from \"./.internal/charts/types/SerialChart\";\nexport { PieChart3DDataItem, IPieChart3DDataFields, IPieChart3DProperties, IPieChart3DEvents, IPieChart3DAdapters, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\nexport { PieChartDataItem, IPieChartDataFields, IPieChartProperties, IPieChartEvents, IPieChartAdapters, PieChart } from \"./.internal/charts/types/PieChart\";\nexport { FlowDiagramDataItem, IFlowDiagramDataFields, IFlowDiagramProperties, IFlowDiagramEvents, IFlowDiagramAdapters, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\nexport { SankeyDiagramDataItem, ISankeyDiagramDataFields, ISankeyDiagramProperties, ISankeyDiagramEvents, ISankeyDiagramAdapters, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\nexport { ChordDiagramDataItem, IChordDiagramDataFields, IChordDiagramProperties, IChordDiagramEvents, IChordDiagramAdapters, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\nexport { TreeMapDataItem, ITreeMapDataFields, ITreeMapProperties, ITreeMapEvents, ITreeMapAdapters, TreeMap } from \"./.internal/charts/types/TreeMap\";\nexport { XYChart3DDataItem, IXYChart3DDataFields, IXYChart3DProperties, IXYChart3DEvents, IXYChart3DAdapters, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\n\n/**\n * Elements: charts\n */\nexport { ChartDataItem, IChartDataFields, IChartProperties, IChartEvents, IChartAdapters, Chart } from \"./.internal/charts/Chart\";\nexport { LegendDataItem, LegendPosition, ILegendDataFields, ILegendProperties, ILegendEvents, ILegendAdapters, ILegendItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\nexport { IHeatLegendProperties, IHeatLegendEvents, IHeatLegendAdapters, HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\n\n/**\n * Elements: series\n */\nexport { SeriesDataItem, ISeriesDataFields, ISeriesProperties, ISeriesEvents, ISeriesAdapters, Series } from \"./.internal/charts/series/Series\";\nexport { XYSeriesDataItem, IXYSeriesDataFields, IXYSeriesProperties, IXYSeriesEvents, IXYSeriesAdapters, XYSeries } from \"./.internal/charts/series/XYSeries\";\nexport { LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesEvents, ILineSeriesAdapters, LineSeries } from \"./.internal/charts/series/LineSeries\";\nexport { ILineSeriesSegmentProperties, ILineSeriesSegmentEvents, ILineSeriesSegmentAdapters, LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\nexport { CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesEvents, ICandlestickSeriesAdapters, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\nexport { OHLCSeriesDataItem, IOHLCSeriesDataFields, IOHLCSeriesProperties, IOHLCSeriesEvents, IOHLCSeriesAdapters, OHLCSeries } from \"./.internal/charts/series/OHLCSeries\";\nexport { ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesEvents, IColumnSeriesAdapters, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\nexport { StepLineSeriesDataItem, IStepLineSeriesDataFields, IStepLineSeriesProperties, IStepLineSeriesEvents, IStepLineSeriesAdapters, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\nexport { RadarSeriesDataItem, IRadarSeriesDataFields, IRadarSeriesProperties, IRadarSeriesEvents, IRadarSeriesAdapters, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\nexport { RadarColumnSeriesDataItem, IRadarColumnSeriesDataFields, IRadarColumnSeriesProperties, IRadarColumnSeriesEvents, IRadarColumnSeriesAdapters, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\nexport { PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesEvents, IPieSeriesAdapters, PieSeries } from \"./.internal/charts/series/PieSeries\";\nexport { IPieTickProperties, IPieTickEvents, IPieTickAdapters, PieTick } from \"./.internal/charts/series/PieTick\";\nexport { IPieSeries3DProperties, IPieSeries3DDataFields, PieSeries3DDataItem, IPieSeries3DEvents, IPieSeries3DAdapters, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\nexport { TreeMapSeriesDataItem, ITreeMapSeriesDataFields, ITreeMapSeriesProperties, ITreeMapSeriesEvents, ITreeMapSeriesAdapters, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\nexport { ColumnSeries3DDataItem, IColumnSeries3DDataFields, IColumnSeries3DProperties, IColumnSeries3DEvents, IColumnSeries3DAdapters, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\nexport { ConeSeriesDataItem, IConeSeriesDataFields, IConeSeriesProperties, IConeSeriesEvents, IConeSeriesAdapters, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\n\n/**\n * Elements: axes\n */\nexport { AxisDataItem, IAxisDataFields, IAxisProperties, IAxisEvents, IAxisAdapters, Axis } from \"./.internal/charts/axes/Axis\";\nexport { IGridProperties, IGridEvents, IGridAdapters, Grid } from \"./.internal/charts/axes/Grid\";\nexport { IAxisTickProperties, IAxisTickEvents, IAxisTickAdapters, AxisTick } from \"./.internal/charts/axes/AxisTick\";\nexport { IAxisLabelProperties, IAxisLabelEvents, IAxisLabelAdapters, AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\nexport { IAxisLineProperties, IAxisLineEvents, IAxisLineAdapters, AxisLine } from \"./.internal/charts/axes/AxisLine\";\nexport { IAxisFillProperties, IAxisFillEvents, IAxisFillAdapters, AxisFill } from \"./.internal/charts/axes/AxisFill\";\nexport { IAxisRendererProperties, IAxisRendererEvents, IAxisRendererAdapters, AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\nexport { IAxisBreakProperties, IAxisBreakEvents, IAxisBreakAdapters, AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\nexport { ValueAxisDataItem, IMinMaxStep, IValueAxisDataFields, IValueAxisProperties, IValueAxisEvents, IValueAxisAdapters, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\nexport { CategoryAxisDataItem, ICategoryAxisDataFields, ICategoryAxisProperties, ICategoryAxisEvents, ICategoryAxisAdapters, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\nexport { ICategoryAxisBreakProperties, ICategoryAxisBreakEvents, ICategoryAxisBreakAdapters, CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\nexport { DateAxisDataItem, IDateAxisDataFields, IDateAxisProperties, IDateAxisEvents, IDateAxisAdapters, DateAxis } from \"./.internal/charts/axes/DateAxis\";\nexport { IDateAxisBreakProperties, IDateAxisBreakEvents, IDateAxisBreakAdapters, DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\nexport { IValueAxisBreakProperties, IValueAxisBreakEvents, IValueAxisBreakAdapters, ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\nexport { IAxisRendererXProperties, IAxisRendererXEvents, IAxisRendererXAdapters, AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\nexport { IAxisRendererYProperties, IAxisRendererYEvents, IAxisRendererYAdapters, AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\nexport { IAxisRendererRadialProperties, IAxisRendererRadialEvents, IAxisRendererRadialAdapters, AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\nexport { IAxisLabelCircularProperties, IAxisLabelCircularEvents, IAxisLabelCircularAdapters, AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\nexport { IAxisRendererCircularProperties, IAxisRendererCircularEvents, IAxisRendererCircularAdapters, AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\nexport { IAxisFillCircularProperties, IAxisFillCircularEvents, IAxisFillCircularAdapters, AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\nexport { IGridCircularProperties, IGridCircularEvents, IGridCircularAdapters, GridCircular } from \"./.internal/charts/axes/GridCircular\";\nexport { IAxisRendererX3DProperties, IAxisRendererX3DEvents, IAxisRendererX3DAdapters, AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\nexport { IAxisRendererY3DProperties, IAxisRendererY3DEvents, IAxisRendererY3DAdapters, AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\n\n/**\n * Elements: elements\n */\nexport { ITickProperties, ITickEvents, ITickAdapters, Tick } from \"./.internal/charts/elements/Tick\";\nexport { IBulletProperties, IBulletEvents, IBulletAdapters, Bullet } from \"./.internal/charts/elements/Bullet\";\nexport { ILabelBulletProperties, ILabelBulletEvents, ILabelBulletAdapters, LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\nexport { ICircleBulletProperties, ICircleBulletEvents, ICircleBulletAdapters, CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\nexport { IXYChartScrollbarProperties, IXYChartScrollbarEvents, IXYChartScrollbarAdapters, XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\nexport { IClockHandProperties, IClockHandEvents, IClockHandAdapters, ClockHand } from \"./.internal/charts/elements/ClockHand\";\n\nexport { IFlowDiagramNodeProperties, IFlowDiagramNodeEvents, IFlowDiagramNodeAdapters, FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\nexport { IFlowDiagramLinkProperties, IFlowDiagramLinkEvents, IFlowDiagramLinkAdapters, FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\n\nexport { ISankeyNodeProperties, ISankeyNodeEvents, ISankeyNodeAdapters, SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\nexport { ISankeyLinkProperties, ISankeyLinkEvents, ISankeyLinkAdapters, SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\n\nexport { IChordNodeProperties, IChordNodeEvents, IChordNodeAdapters, ChordNode } from \"./.internal/charts/elements/ChordNode\";\nexport { IChordLinkProperties, IChordLinkEvents, IChordLinkAdapters, ChordLink } from \"./.internal/charts/elements/ChordLink\";\n\nexport { NavigationBarDataItem, INavigationBarDataFields, INavigationBarProperties, INavigationBarEvents, INavigationBarAdapters, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\n\nexport { Column, IColumnAdapters, IColumnEvents, IColumnProperties } from \"./.internal/charts/elements/Column\";\nexport { Candlestick, ICandlestickAdapters, ICandlestickEvents, ICandlestickProperties } from \"./.internal/charts/elements/Candlestick\";\nexport { OHLC, IOHLCAdapters, IOHLCEvents, IOHLCProperties } from \"./.internal/charts/elements/OHLC\";\nexport { RadarColumn, IRadarColumnAdapters, IRadarColumnEvents, IRadarColumnProperties } from \"./.internal/charts/elements/RadarColumn\";\nexport { Column3D, IColumn3DAdapters, IColumn3DEvents, IColumn3DProperties } from \"./.internal/charts/elements/Column3D\";\nexport { ConeColumn, IConeColumnAdapters, IConeColumnEvents, IConeColumnProperties } from \"./.internal/charts/elements/ConeColumn\";\n\n\n/**\n * Elements: cursors\n */\nexport { IXYCursorProperties, IXYCursorEvents, IXYCursorAdapters, XYCursor } from \"./.internal/charts/cursors/XYCursor\";\nexport { ICursorProperties, ICursorEvents, ICursorAdapters, Cursor } from \"./.internal/charts/cursors/Cursor\";\nexport { IRadarCursorProperties, IRadarCursorEvents, IRadarCursorAdapters, RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\n\n\n\n// WEBPACK FOOTER //\n// ../../src/charts.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {GaugeChart}\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartDataFields}\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartProperties}\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IGaugeChartAdapters}\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IGaugeChartEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t *\r\n\t * @type {ListTemplate<ClockHand>}\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {PieChart3D}\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czech Republic\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czech Republic\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IPieChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IPieChart3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries3D}\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees.\r\n\t *\r\n\t * @default 10\r\n\t * @param {number}  value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return {PieSeries3D} New series\r\n\t */\r\n\tprotected createSeries():this[\"_seriesType\"]{\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagram}\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t * @ignore\r\n\t * @type {ChordLink}\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t *\r\n\t * @type {ChordNode}\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t *\r\n\t * @type {number | Percent}\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t * @type {number}\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t * @type {number}\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t * @type {boolean}\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ChordDiagramDataItem}\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordDiagramDataFields}\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IChordDiagramProperties}\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IChordDiagramEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * A list of Chord links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<ChordLink>}\r\n\t */\r\n\tpublic links: ListTemplate<ChordLink>;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t * @type {Iterator}\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @type {number}\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"none\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tlet nodesContainer = this.nodesContainer;\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, $math.min(chartContainer.innerWidth, chartContainer.innerHeight)) / 2;\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\t\t\t\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.invalidate();\t\t\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return {this} Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param {number}  value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param {number | Percent}  value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPropertyValue(\"innerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param {boolean}  value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */ \r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */ \r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IQuadraticCurveProperties}\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IQuadraticCurveAdapters}\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IQuadraticCurveEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.element.attr({ \"d\": d });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param {number} value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param {number} value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param  {number}             position  Position (0-1)\r\n\t * @return {IOrientationPoint}            Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DataItem, IDataItemEvents } from \"../../core/DataItem\";\r\nimport { List, ListTemplate, IListEvents } from \"../../core/utils/List\";\r\nimport { Legend, ILegendDataFields, LegendDataItem, ILegendItem } from \"../Legend\";\r\nimport { Component, IComponentEvents } from \"../../core/Component\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMap}\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Related series.\r\n\t *\r\n\t * @type {TreeMapSeries}\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t *\r\n\t * @type {TreeMapSeriesDataItem}\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {TreeMapDataItem[]}\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param {number}  value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param {string}  name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param {Color}  value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Color} Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * series of data item\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (this._series) {\r\n\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\tthis._series.dispose();\r\n\t\t}\r\n\t\tthis._series = series;\r\n\t\tthis._disposers.push(series);\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum levels the chart will allow drilling down to.\r\n\t *\r\n\t * @default 2\r\n\t * @type {number}\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @type {\"none\" | \"ascending\" | \"descending\"}\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapDataFields}\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {ITreeMapProperties}\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @type {SeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ITreeMapEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t *\r\n\t * @type {ValueAxis}\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t * @type {function}\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {PieSeries}\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapDataItem}\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {TreeMapSeries[]}\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied autoamtically to each new chart item, if\r\n\t * not explicitly set.\r\n\t *\r\n\t * @type {ColorSet}\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<string, TreeMapSeries>} Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @type {TreeMapDataItem}\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed:TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", ()=>{\r\n\t\t\tthis.invalidateLayout();\r\n\t\t})\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t})\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t})\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t});\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tregistry.events.once(\"exitframe\", () => {\r\n\t\t\tthis.toggleBullets(0);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0; i < children.length; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem} dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {TreeMapDataItem}  dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param {number}  duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columns.template.hide(duration);\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columns.template.show(duration);\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tif (dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\t\t\tif (rangeChangeAnimation) {\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {XYSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum drill-down levels the chart will allow going to.\r\n\t *\r\n\t * If set, the chart will not drill-down further, even if there are sub-items\r\n\t * available.\r\n\t *\r\n\t * Set to 0 to disable drill down functionality.\r\n\t *\r\n\t * @param {number}  value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param {number}  value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return {this} new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param {string}  value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected handleDataItemValueChange(): void {\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t//protected handleDataItemWorkingValueChange(event: AMEvent<TreeMapDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\t//if(event.property == \"value\"){\r\n\t\t//\tthis.invalidateLayout();\r\n\t\t//}\r\n\t//}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout(){\r\n\t\tsuper.validateLayout();\t\t\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0, node.y0 = y0;\r\n\t\t\t\tnode.x1 = x1, node.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) k = mid + 1;\r\n\t\t\t\telse hi = mid;\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)--k;\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n\t\t\tnode.y0 = y0, node.y1 = y0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n\t\t\tnode.x0 = x0, node.x1 = x0 += node.value * k;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tparent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {TreeMapDataItem}  parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0, dy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo sumValue = nodes.getIndex(i1++).value; while (!sumValue && i1 < n);\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? y0 += dy * sumValue / value : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue, i0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t */\r\n\tprotected feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: Array<this[\"_seriesType\"]> = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif(series.level == 1){\r\n\t\t\t\t\tlegendData.push(series);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t\tlegend.itemContainers.template.propertyFields.disabled = \"hiddenInLegend\";\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t}\r\n\t}\t\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DDataFields}\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DProperties}\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChart3DAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChart3DEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t *\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t * @type {[type]}\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Container}\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param {number}  value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param {number}  value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return {number} Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / count;\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / count * $math.cos(this.angle) * series.depthIndex;\r\n\t\t\t\tseries.dy = -this.depth / count * $math.sin(this.angle) * series.depthIndex;\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\r\n\t\t\t\t$iter.each(series.columns.iterator(), (column) => {\r\n\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\r\n\t\t\t\ts++;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t * @ignore\r\n\t * @type {OHLC}\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {OHLCSeries}\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {OHLCSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IOHLCSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IOHLCSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IOHLCSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IOHLCSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {OHLCSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeries}\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties { \r\n\tnoRisers?:boolean;\r\n\r\n\tstartLocation?:number;\r\n\r\n\tendLocation?:number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {StepLineSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {StepLineSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {IPoint[]}           points     [description]\r\n\t * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n\t * @param {string}             xField     [description]\r\n\t * @param {string}             yField     [description]\r\n\t * @param {boolean}            backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (this.connect) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param {LineSeriesSegment}  segment     Segment\r\n\t * @param {IPoint[]}           points      Segment points\r\n\t * @param {IPoint[]}           closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif(this.yAxis == this.baseAxis){\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only vertical, depending on base axis) lines, \r\n\t * instead of connecting them with vertical(horizontal) lines.\r\n\t * \r\n\t *\r\n\t * @default false\r\n\t * @param {boolean}  value No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tif(this.setPropertyValue(\"noRisers\", value)){\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif(this.setPropertyValue(\"startLocation\", value)){\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param {number} value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif(this.setPropertyValue(\"endLocation\", value)){\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesSegmentProperties}\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IStepLineSeriesSegmentAdapters}\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IStepLineSeriesSegmentEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {Sprite}\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {IPoint[]}  points       Points to connect\r\n\t * @param {IPoint[]}  closePoints  ?\r\n\t * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n\t * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?:boolean, vertical?:boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif(noRisers){\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif(points.length > 0){\r\n\t\t\t\t\tfor(let i = 1; i < points.length; i++){\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tlet previouosPoint = points[i - 1];\r\n\r\n\t\t\t\t\t\tif(vertical){\r\n\t\t\t\t\t\t\tif(point.y == previouosPoint.y){\r\n\t\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tif(point.x == previouosPoint.x){\r\n\t\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.element.attr({ \"d\": path });\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.element.attr({ \"d\": path });\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.element.attr({ \"d\": path });\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.element.attr({ \"d\": path });\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {Slice}\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {RadarColumnSeries}\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem:RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column:RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRadarColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRadarColumnSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {RadarChart}\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return {this[\"_column\"]} RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\t// @todo use getPoint() instead of these\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\t\tif(arc > 0){\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = radarColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = this.columnsContainer;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n\t * @param {string}                    xKey      [description]\r\n\t * @param {string}                    yKey      [description]\r\n\t * @param {number}                    locationX [description]\r\n\t * @param {number}                    locationY [description]\r\n\t * @param {string}                    stackKeyX [description]\r\n\t * @param {string}                    stackKeyY [description]\r\n\t */\r\n\tprotected getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\t\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t * @ignore\r\n\t * @type {ConeColumn}\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ConeSeries}\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IConeSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IConeSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return {this[\"_column\"]} Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return {string} SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletProperties}\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ICircleBulletAdapters}\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {ICircleBulletEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t *\r\n\t * @type {Circle}\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tthis.circle = this.createChild(Circle);\r\n\t\tthis.circle.shouldClone = false;\r\n\t\tthis.circle.radius = 5;\r\n\t\tthis.circle.isMeasured = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param {this}  source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarProperties}\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IXYChartScrollbarAdapters}\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IXYChartScrollbarEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t *\r\n\t * @type {List<XYSeries>}\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t *\r\n\t * @type {MutableValueDisposer}\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t *\r\n\t * @type {XYChart}\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {Sprite}\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.element = this.paper.add(\"path\");\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return {List<XYSeries>} Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\txAxis.title.disabled = true;\r\n\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\t\t\t\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// @todo find clone, otherwise there might be probs with multiple axes\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return {XYChart} Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param {XYChart} chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYChart} Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif(this.chart.data != this.scrollbarChart.data){\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.element.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {object}  config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t *\r\n\t * @type {NavigationBar}\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param {string}  value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {string} Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {NavigationBarDataFIelds}\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarProperties}\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {INavigationBarAdapters}\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {INavigationBarEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t *\r\n\t * @type {ListTemplate<TextLink>}\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<TextLink>}\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t * @type {.ListIterator<Sprite>}\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t *\r\n\t * @type {TextLink}\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t *\r\n\t * @type {ListTemplate<Triangle>}\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(this.links.template);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(this.separators.template);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {NavigationBarDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: NavigationBarDataItem): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, SpriteEventDispatcher, AMEvent, visualProperties } from \"../../core/Sprite\";\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { Axis, AxisItemLocation } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { IDataItemEvents } from \"../../core/DataItem\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t * @ignore\r\n\t * @type {Column}\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @type {ColumnSeries}\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, Sprite>}\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param {Column}  column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Column} Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <ColumnSeriesDataItem>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @type {Dictionary<string, this[\"_column\"]>}\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @type {boolean}\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesDataFields}\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesProperties}\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnSeriesAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnSeriesEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {ColumnSeriesDataItem}\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t *\r\n\t * @type {ListTemplate<Sprite>}\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n\t * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n\t * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tpublic simplifiedProcessing: boolean = false;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns;\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return {ColumnSeriesDataItem} Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\t// can't use columnsContainer.removeChildren() because with 3d columns we use one container for all columns\r\n\t\t$iter.each(this.columns.iterator(), (column) => {\r\n\t\t\tif(column.dataItem.index < this.startIndex || column.dataItem.index >= this.endIndex){\r\n\t\t\t\tcolumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\tprotected handleDataItemWorkingValueChange(event: AMEvent<ColumnSeriesDataItem, IDataItemEvents>[\"workingvaluechanged\"]): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(event.target);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n\t * @return {number}                       Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tbottomLocation = 0;\r\n\t\t\t\ttopLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\trightLocation = 0;\r\n\t\t\t\tleftLocation = 0;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t}\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (w - paddingLeft - paddingRight > 0 && h - paddingTop - paddingBottom > 0) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem.column) {\r\n\t\t\t// otherwise might flicker when enabling\r\n\t\t\tdataItem.column.width = 0;\r\n\t\t\tdataItem.column.height = 0;\r\n\t\t\tdataItem.column.__disabled = true;\r\n\t\t}\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\tif (rangeColumn) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param {Sprite}  sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif(this.xOpenField && this.xField){\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(this.yOpenField && this.yField){\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set accessibility\r\n\t\tif (!this.isInTransition()) {\r\n\r\n\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\tsprite.role = \"menuitem\";\r\n\t\t\t\tsprite.focusable = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsprite.role = \"listitem\";\r\n\t\t\t\tsprite.focusable = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Set readerTitle on demand only (focus or hover)\r\n\t\t\tif ($type.hasValue(this.itemReaderText) && this.itemReaderText != \"\") {\r\n\t\t\t\tif (sprite.focusable) {\r\n\t\t\t\t\tsprite.events.once(\"focus\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"blur\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (sprite.hoverable) {\r\n\t\t\t\t\tsprite.events.once(\"over\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tsprite.events.once(\"out\", (ev) => {\r\n\t\t\t\t\t\tsprite.readerTitle = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return {ListTemplate<this[\"_column\"]>} Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return {this[\"_column\"]} Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with pther series.\r\n\t *\r\n\t * @default true\r\n\t * @param {boolean}  value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return {SpriteState} State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"]) {\r\n\t\tsuper.updateLegendValue(dataItem);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Container}  marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param {ColumnSeries}  source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\treturn (this._startLocation + this._endLocation) / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { SpriteEventDispatcher, AMEvent } from \"../../core/Sprite\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnProperties}\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IColumnAdapters}\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IColumnEvents}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t * @type {RoundedRectangle}\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\tthis.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", () => {\r\n\t\t\tif (this.layout == \"none\") {\r\n\t\t\t\tthis.layout = \"absolute\";\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element:\r\n\t * * Triggers events\r\n\t * * Redraws the element\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tthis.column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param {Sprite} source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts"],"sourceRoot":""}